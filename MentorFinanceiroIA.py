"""
# Mentor Financeiro AI
# Aplica√ß√£o de assist√™ncia financeira com interface Streamlit e recursos de gamifica√ß√£o
# Desenvolvido para fins educacionais
"""

# Importa√ß√£o das bibliotecas necess√°rias
import streamlit as st  # Biblioteca para cria√ß√£o de interface web
import google.generativeai as genai  # API do Google Generative AI (Gemini)
import os  # Para manipula√ß√£o de vari√°veis de ambiente
import time  # Para pausas e simula√ß√£o de processamento
import pandas as pd  # Para manipula√ß√£o de dados
import matplotlib.pyplot as plt  # Para visualiza√ß√£o de dados
import numpy as np  # Para opera√ß√µes num√©ricas
import random  # Para gera√ß√£o de desafios aleat√≥rios
from datetime import datetime, timedelta  # Para manipula√ß√£o de datas

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="Mentor Financeiro AI",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para aplicar estilo CSS personalizado
def aplicar_estilo():
    """
    Aplica estilos CSS personalizados √† interface Streamlit.
    Isso melhora a apar√™ncia visual e a experi√™ncia do usu√°rio.
    """
    st.markdown("""
    <style>
        /* Estilo geral */
        .main {
            background-color: #5c1691;
            padding: 20px;
        }
        
        /* Estilo para cabe√ßalhos */
        h1, h2, h3 {
            color: #386641;
        }
        
        /* Estilo para caixas de informa√ß√£o */
        .info-box {
            background-color: #5c1691;
            border-left: 5px solid #81c784;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        /* Estilo para caixas de sucesso */
        .success-box {
            background-color: #d67322;
            border-left: 5px solid #4caf50;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        /* Estilo para caixas de alerta */
        .warning-box {
            background-color: #f5ea73;
            border-left: 5px solid #fbc02d;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        /* Estilo para barras de progresso */
        .stProgress > div > div {
            background-color: #080808;
        }
        
        /* Estilo para bot√µes */
        .stButton button {
            background-color: #5c1691;
            color: white;
            border-radius: 5px;
            border: none;
            padding: 10px 20px;
            font-weight: bold;
        }
        
        .stButton button:hover {
            background-color: #386641;
        }
        
        /* Estilo para cart√µes de desafio */
        .challenge-card {
            background-color: #420773;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        /* Estilo para medalhas e conquistas */
        .badge {
            display: inline-block;
            background-color: #81c784;
            color: white;
            border-radius: 20px;
            padding: 5px 15px;
            margin-right: 10px;
            font-weight: bold;
        }
    </style>
    """, unsafe_allow_html=True)

# Aplicar estilo personalizado
aplicar_estilo()

# --- Configura√ß√£o da API Key do Google Generative AI ---
def configurar_api_key():
    """
    Configura a API Key do Google Generative AI.
    Verifica se a chave est√° dispon√≠vel como vari√°vel de ambiente ou solicita ao usu√°rio.
    
    Returns:
        bool: True se a configura√ß√£o foi bem-sucedida, False caso contr√°rio
    """
    # Verificar se j√° existe uma chave na sess√£o
    if 'api_key_configurada' in st.session_state and st.session_state.api_key_configurada:
        return True
    
    # Tentar obter a chave da vari√°vel de ambiente
    api_key = os.environ.get("GOOGLE_API_KEY")
    
    # Se n√£o encontrar, solicitar ao usu√°rio
    if not api_key:
        st.sidebar.markdown("### Configura√ß√£o da API Key")
        api_key = st.sidebar.text_input(
            "Insira sua Google API Key:",
            type="password",
            help="Obtenha sua chave em https://aistudio.google.com/app/apikey"
        )
        
        if not api_key:
            st.sidebar.warning("‚ö†Ô∏è API Key n√£o fornecida. Algumas funcionalidades estar√£o limitadas.")
            return False
    
    # Tentar configurar a API com a chave fornecida
    try:
        genai.configure(api_key=api_key)
        st.session_state.api_key_configurada = True
        return True
    except Exception as e:
        st.sidebar.error(f"‚ùå Erro ao configurar a API Key: {e}")
        st.session_state.api_key_configurada = False
        return False

# --- Configura√ß√£o do Modelo Generativo ---
def configurar_modelo_gemini():
    """
    Configura o modelo Gemini com par√¢metros espec√≠ficos para gera√ß√£o de conte√∫do.
    
    Returns:
        model: Inst√¢ncia configurada do modelo Gemini, ou None em caso de erro
    """
    if not configurar_api_key():
        return None
    
    # Configura√ß√µes para gera√ß√£o de conte√∫do
    generation_config = {
        "temperature": 0.75,  # Controla a criatividade (valores mais altos = mais criativo)
        "top_p": 1,
        "top_k": 1,
        "max_output_tokens": 8000,  # Aumentado para conselhos mais detalhados
    }
    
    # Configura√ß√µes de seguran√ßa
    safety_settings = [
        {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    ]
    
    try:
        # Inicializar o modelo Gemini
        model = genai.GenerativeModel(
            model_name="gemini-2.0-flash",
            generation_config=generation_config,
            safety_settings=safety_settings
        )
        return model
    except Exception as e:
        st.error(f"‚ùå Erro ao inicializar o modelo Gemini: {e}")
        return None

# --- Inicializa√ß√£o da Sess√£o ---
def inicializar_sessao():
    """
    Inicializa vari√°veis de sess√£o para armazenar dados do usu√°rio e estado da aplica√ß√£o.
    Isso permite persist√™ncia de dados entre intera√ß√µes com a interface.
    """
    # Vari√°veis para dados do usu√°rio
    if 'nome_usuario' not in st.session_state:
        st.session_state.nome_usuario = ""
    
    if 'dados_financeiros' not in st.session_state:
        st.session_state.dados_financeiros = {
            'renda_mensal': None,
            'despesas_fixas': {},
            'despesas_variaveis': {},
            'dividas': {},
            'metas': {}
        }
    
    # Vari√°veis para gamifica√ß√£o
    if 'pontos' not in st.session_state:
        st.session_state.pontos = 0
    
    if 'nivel' not in st.session_state:
        st.session_state.nivel = 1
    
    if 'conquistas' not in st.session_state:
        st.session_state.conquistas = []
    
    if 'desafios_ativos' not in st.session_state:
        st.session_state.desafios_ativos = []
    
    if 'desafios_concluidos' not in st.session_state:
        st.session_state.desafios_concluidos = []
    
    # Vari√°veis para controle de navega√ß√£o
    if 'pagina_atual' not in st.session_state:
        st.session_state.pagina_atual = "boas_vindas"
    
    if 'historico_consultas' not in st.session_state:
        st.session_state.historico_consultas = []
    
    # Vari√°vel para controle de diagn√≥stico
    if 'diagnostico_realizado' not in st.session_state:
        st.session_state.diagnostico_realizado = False

# --- Fun√ß√µes de Gamifica√ß√£o ---
def adicionar_pontos(quantidade, motivo=""):
    """
    Adiciona pontos ao usu√°rio e verifica se houve evolu√ß√£o de n√≠vel.
    
    Args:
        quantidade (int): Quantidade de pontos a adicionar
        motivo (str): Motivo pelo qual os pontos foram adicionados
    """
    # Adicionar pontos
    st.session_state.pontos += quantidade
    
    # Verificar evolu√ß√£o de n√≠vel (a cada 100 pontos)
    nivel_anterior = st.session_state.nivel
    st.session_state.nivel = 1 + (st.session_state.pontos // 100)
    
    # Se houve evolu√ß√£o de n√≠vel, adicionar conquista
    if st.session_state.nivel > nivel_anterior:
        adicionar_conquista(f"N√≠vel {st.session_state.nivel} Alcan√ßado! üèÜ")
        st.balloons()  # Efeito visual de celebra√ß√£o
    
    # Registrar no hist√≥rico se houver motivo
    if motivo:
        st.success(f"üéâ +{quantidade} pontos: {motivo}")

def adicionar_conquista(conquista):
    """
    Adiciona uma nova conquista √† lista de conquistas do usu√°rio.
    
    Args:
        conquista (str): Descri√ß√£o da conquista obtida
    """
    if conquista not in st.session_state.conquistas:
        st.session_state.conquistas.append(conquista)
        st.success(f"üèÜ Nova conquista desbloqueada: {conquista}")

def gerar_desafio_aleatorio():
    """
    Gera um desafio financeiro aleat√≥rio para o usu√°rio.
    
    Returns:
        dict: Dicion√°rio contendo informa√ß√µes do desafio
    """
    desafios = [
        {
            "titulo": "Semana Sem Delivery",
            "descricao": "Evite pedir comida por delivery por uma semana inteira.",
            "dificuldade": "M√©dio",
            "pontos": 30,
            "duracao_dias": 7
        },
        {
            "titulo": "Dia de Registro Total",
            "descricao": "Registre absolutamente todos os seus gastos por um dia inteiro, at√© os centavos.",
            "dificuldade": "F√°cil",
            "pontos": 15,
            "duracao_dias": 1
        },
        {
            "titulo": "Economia de R$50",
            "descricao": "Encontre formas de economizar R$50 esta semana em gastos que voc√™ normalmente faria.",
            "dificuldade": "M√©dio",
            "pontos": 25,
            "duracao_dias": 7
        },
        {
            "titulo": "Pesquisa de Pre√ßos",
            "descricao": "Compare pre√ßos de 5 produtos que voc√™ compra regularmente em pelo menos 3 estabelecimentos diferentes.",
            "dificuldade": "M√©dio",
            "pontos": 20,
            "duracao_dias": 3
        },
        {
            "titulo": "Dia Sem Gastos",
            "descricao": "Passe um dia inteiro sem gastar absolutamente nada.",
            "dificuldade": "Dif√≠cil",
            "pontos": 40,
            "duracao_dias": 1
        }
    ]
    
    # Selecionar um desafio aleat√≥rio
    desafio = random.choice(desafios)
    
    # Adicionar data de in√≠cio e fim
    data_inicio = datetime.now()
    data_fim = data_inicio + timedelta(days=desafio["duracao_dias"])
    
    desafio["data_inicio"] = data_inicio
    desafio["data_fim"] = data_fim
    desafio["concluido"] = False
    
    return desafio

def aceitar_desafio(desafio):
    """
    Adiciona um desafio √† lista de desafios ativos do usu√°rio.
    
    Args:
        desafio (dict): Dicion√°rio contendo informa√ß√µes do desafio
    """
    # Verificar se o desafio j√° est√° ativo
    titulos_ativos = [d["titulo"] for d in st.session_state.desafios_ativos]
    if desafio["titulo"] not in titulos_ativos:
        st.session_state.desafios_ativos.append(desafio)
        st.success(f"üéØ Desafio aceito: {desafio['titulo']}")
        adicionar_pontos(5, "Aceitou um novo desafio")

def concluir_desafio(indice):
    """
    Marca um desafio como conclu√≠do e concede os pontos correspondentes.
    
    Args:
        indice (int): √çndice do desafio na lista de desafios ativos
    """
    if 0 <= indice < len(st.session_state.desafios_ativos):
        desafio = st.session_state.desafios_ativos[indice]
        desafio["concluido"] = True
        
        # Mover para desafios conclu√≠dos
        st.session_state.desafios_concluidos.append(desafio)
        st.session_state.desafios_ativos.pop(indice)
        
        # Adicionar pontos e conquista
        adicionar_pontos(desafio["pontos"], f"Concluiu o desafio: {desafio['titulo']}")
        
        # Verificar conquistas especiais
        if len(st.session_state.desafios_concluidos) == 1:
            adicionar_conquista("Primeiro Desafio Conclu√≠do! üåü")
        elif len(st.session_state.desafios_concluidos) == 5:
            adicionar_conquista("Desafiador Experiente: 5 Desafios Conclu√≠dos! üî•")
        elif len(st.session_state.desafios_concluidos) == 10:
            adicionar_conquista("Mestre dos Desafios: 10 Desafios Conclu√≠dos! üèÖ")

# --- Fun√ß√µes de Diagn√≥stico Financeiro ---
def calcular_saude_financeira():
    """
    Calcula indicadores de sa√∫de financeira com base nos dados do usu√°rio.
    
    Returns:
        dict: Dicion√°rio contendo indicadores de sa√∫de financeira
    """
    dados = st.session_state.dados_financeiros
    
    # Valores padr√£o
    resultado = {
        "comprometimento_renda": 0,
        "endividamento": 0,
        "reserva_emergencia": 0,
        "score": 0,
        "classificacao": "N√£o dispon√≠vel"
    }
    
    # Verificar se h√° dados suficientes
    if not dados["renda_mensal"]:
        return resultado
    
    # Calcular total de despesas fixas
    total_despesas_fixas = sum(dados["despesas_fixas"].values()) if dados["despesas_fixas"] else 0
    
    # Calcular total de despesas vari√°veis
    total_despesas_variaveis = sum(dados["despesas_variaveis"].values()) if dados["despesas_variaveis"] else 0
    
    # Calcular total de parcelas de d√≠vidas
    total_parcelas_dividas = 0
    for divida in dados["dividas"].values():
        if "parcela_mensal" in divida and divida["parcela_mensal"]:
            total_parcelas_dividas += divida["parcela_mensal"]
    
    # Calcular total de despesas
    total_despesas = total_despesas_fixas + total_despesas_variaveis + total_parcelas_dividas
    
    # Calcular comprometimento de renda
    if dados["renda_mensal"] > 0:
        resultado["comprometimento_renda"] = (total_despesas / dados["renda_mensal"]) * 100
    
    # Calcular endividamento
    total_dividas = sum([d.get("valor_total", 0) for d in dados["dividas"].values()])
    if dados["renda_mensal"] > 0:
        resultado["endividamento"] = (total_dividas / (dados["renda_mensal"] * 12)) * 100
    
    # Calcular reserva de emerg√™ncia
    reserva = dados.get("reserva_emergencia", 0)
    if total_despesas > 0:
        resultado["reserva_emergencia"] = reserva / total_despesas if reserva else 0
    
    # Calcular score de sa√∫de financeira (0-100)
    score = 100
    
    # Penalizar por alto comprometimento de renda
    if resultado["comprometimento_renda"] > 80:
        score -= 40
    elif resultado["comprometimento_renda"] > 60:
        score -= 25
    elif resultado["comprometimento_renda"] > 40:
        score -= 10
    
    # Penalizar por alto endividamento
    if resultado["endividamento"] > 50:
        score -= 30
    elif resultado["endividamento"] > 30:
        score -= 20
    elif resultado["endividamento"] > 15:
        score -= 10
    
    # Bonificar por reserva de emerg√™ncia
    if resultado["reserva_emergencia"] >= 6:
        score += 20
    elif resultado["reserva_emergencia"] >= 3:
        score += 10
    elif resultado["reserva_emergencia"] < 1:
        score -= 20
    
    # Garantir que o score esteja entre 0 e 100
    resultado["score"] = max(0, min(100, score))
    
    # Classificar sa√∫de financeira
    if resultado["score"] >= 80:
        resultado["classificacao"] = "Excelente"
    elif resultado["score"] >= 60:
        resultado["classificacao"] = "Boa"
    elif resultado["score"] >= 40:
        resultado["classificacao"] = "Regular"
    elif resultado["score"] >= 20:
        resultado["classificacao"] = "Preocupante"
    else:
        resultado["classificacao"] = "Cr√≠tica"
    
    return resultado

def gerar_grafico_despesas():
    """
    Gera um gr√°fico de pizza com a distribui√ß√£o das despesas do usu√°rio.
    
    Returns:
        fig: Figura do matplotlib com o gr√°fico gerado
    """
    dados = st.session_state.dados_financeiros
    
    # Combinar todas as despesas em um √∫nico dicion√°rio
    todas_despesas = {}
    
    # Adicionar despesas fixas
    for categoria, valor in dados["despesas_fixas"].items():
        todas_despesas[f"Fixo: {categoria}"] = valor
    
    # Adicionar despesas vari√°veis
    for categoria, valor in dados["despesas_variaveis"].items():
        todas_despesas[f"Vari√°vel: {categoria}"] = valor
    
    # Adicionar parcelas de d√≠vidas
    for nome_divida, info_divida in dados["dividas"].items():
        if "parcela_mensal" in info_divida and info_divida["parcela_mensal"]:
            todas_despesas[f"D√≠vida: {nome_divida}"] = info_divida["parcela_mensal"]
    
    # Verificar se h√° dados para gerar o gr√°fico
    if not todas_despesas:
        return None
    
    # Criar figura
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # Ordenar despesas por valor (do maior para o menor)
    despesas_ordenadas = dict(sorted(todas_despesas.items(), key=lambda x: x[1], reverse=True))
    
    # Definir cores para o gr√°fico
    cores = plt.cm.tab20.colors
    
    # Criar gr√°fico de pizza
    wedges, texts, autotexts = ax.pie(
        despesas_ordenadas.values(),
        labels=None,
        autopct='%1.1f%%',
        startangle=90,
        colors=cores[:len(despesas_ordenadas)]
    )
    
    # Personalizar apar√™ncia dos textos
    for autotext in autotexts:
        autotext.set_color('white')
        autotext.set_fontsize(10)
        autotext.set_fontweight('bold')
    
    # Adicionar legenda
    ax.legend(
        wedges,
        despesas_ordenadas.keys(),
        title="Categorias",
        loc="center left",
        bbox_to_anchor=(1, 0, 0.5, 1)
    )
    
    # Adicionar t√≠tulo
    ax.set_title("Distribui√ß√£o de Despesas Mensais", fontsize=16, pad=20)
    
    # Ajustar layout
    plt.tight_layout()
    
    return fig

def calcular_tempo_quitacao_dividas():
    """
    Calcula o tempo estimado para quita√ß√£o de cada d√≠vida e o total.
    
    Returns:
        dict: Dicion√°rio com informa√ß√µes sobre tempo de quita√ß√£o
    """
    dados = st.session_state.dados_financeiros
    resultado = {
        "dividas": {},
        "tempo_total_meses": 0,
        "valor_total": 0,
        "juros_total": 0
    }
    
    # Verificar se h√° d√≠vidas cadastradas
    if not dados["dividas"]:
        return resultado
    
    tempo_maximo = 0
    
    # Calcular para cada d√≠vida
    for nome, divida in dados["dividas"].items():
        if "valor_total" in divida and "parcela_mensal" in divida and divida["parcela_mensal"] > 0:
            # Dados b√°sicos da d√≠vida
            valor_total = divida["valor_total"]
            parcela_mensal = divida["parcela_mensal"]
            taxa_juros_mensal = divida.get("taxa_juros_mensal", 0) / 100 if "taxa_juros_mensal" in divida else 0
            
            # Inicializar valores
            saldo_devedor = valor_total
            meses = 0
            total_pago = 0
            total_juros = 0
            
            # Simular pagamentos at√© quitar
            while saldo_devedor > 0 and meses < 1000:  # Limite de 1000 meses para evitar loop infinito
                meses += 1
                
                # Calcular juros do m√™s
                juros_mes = saldo_devedor * taxa_juros_mensal
                total_juros += juros_mes
                
                # Atualizar saldo devedor
                amortizacao = min(parcela_mensal, saldo_devedor + juros_mes)
                total_pago += amortizacao
                saldo_devedor = saldo_devedor + juros_mes - amortizacao
                
                # Se a parcela n√£o cobre nem os juros, ajustar
                if saldo_devedor > valor_total and parcela_mensal <= juros_mes:
                    meses = float('inf')
                    break
            
            # Armazenar resultados
            resultado["dividas"][nome] = {
                "tempo_meses": meses,
                "total_pago": total_pago,
                "total_juros": total_juros
            }
            
            # Atualizar totais
            resultado["valor_total"] += valor_total
            resultado["juros_total"] += total_juros
            tempo_maximo = max(tempo_maximo, meses)
    
    # Definir tempo total como o maior tempo entre as d√≠vidas
    resultado["tempo_total_meses"] = tempo_maximo
    
    return resultado

def sugerir_metodo_quitacao():
    """
    Sugere o melhor m√©todo de quita√ß√£o de d√≠vidas com base no perfil do usu√°rio.
    
    Returns:
        dict: Dicion√°rio com sugest√£o de m√©todo e explica√ß√£o
    """
    dados = st.session_state.dados_financeiros
    
    # Verificar se h√° d√≠vidas cadastradas
    if not dados["dividas"]:
        return {
            "metodo": "Nenhum",
            "explicacao": "N√£o h√° d√≠vidas cadastradas para an√°lise."
        }
    
    # Calcular indicadores
    total_dividas = sum([d.get("valor_total", 0) for d in dados["dividas"].values()])
    dividas_com_juros_altos = sum([1 for d in dados["dividas"].values() if d.get("taxa_juros_mensal", 0) > 5])
    quantidade_dividas = len(dados["dividas"])
    
    # Verificar perfil psicol√≥gico (simplificado)
    perfil_motivacional = "conquistas_rapidas"  # Padr√£o
    
    # L√≥gica de decis√£o
    if dividas_com_juros_altos > quantidade_dividas / 2:
        metodo = "Avalanche"
        explicacao = (
            "O m√©todo Avalanche consiste em pagar o m√≠nimo em todas as d√≠vidas e direcionar o valor extra para "
            "a d√≠vida com a maior taxa de juros. Como voc√™ possui v√°rias d√≠vidas com juros altos, este m√©todo "
            "economizar√° mais dinheiro a longo prazo."
        )
    elif perfil_motivacional == "conquistas_rapidas" and quantidade_dividas > 2:
        metodo = "Bola de Neve"
        explicacao = (
            "O m√©todo Bola de Neve consiste em pagar o m√≠nimo em todas as d√≠vidas e direcionar o valor extra para "
            "a d√≠vida com o menor saldo devedor. Este m√©todo proporciona vit√≥rias r√°pidas que aumentam sua motiva√ß√£o, "
            "o que √© ideal para seu perfil."
        )
    else:
        metodo = "H√≠brido"
        explicacao = (
            "Um m√©todo h√≠brido √© recomendado para seu caso. Comece quitando uma d√≠vida pequena para ganhar motiva√ß√£o, "
            "depois foque nas d√≠vidas com juros mais altos para economizar dinheiro a longo prazo."
        )
    
    return {
        "metodo": metodo,
        "explicacao": explicacao
    }

# --- Fun√ß√µes de Conte√∫do Educacional ---
def obter_explicacao_termo_financeiro(termo):
    """
    Obt√©m explica√ß√£o sobre um termo financeiro usando o modelo Gemini.
    
    Args:
        termo (str): Termo financeiro a ser explicado
        
    Returns:
        str: Explica√ß√£o do termo financeiro
    """
    modelo = configurar_modelo_gemini()
    if not modelo:
        return "N√£o foi poss√≠vel obter a explica√ß√£o. Verifique a configura√ß√£o da API Key."
    
    try:
        prompt = [
            f"Explique o termo financeiro '{termo}' de forma simples e did√°tica, como se estivesse explicando para um adolescente.",
            "A explica√ß√£o deve ter no m√°ximo 3 par√°grafos, usar linguagem acess√≠vel e incluir um exemplo pr√°tico do dia a dia.",
            "Responda em portugu√™s do Brasil."
        ]
        
        response = modelo.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"Erro ao obter explica√ß√£o: {e}"

def gerar_dica_financeira_personalizada():
    """
    Gera uma dica financeira personalizada com base nos dados do usu√°rio usando o modelo Gemini.
    
    Returns:
        str: Dica financeira personalizada
    """
    modelo = configurar_modelo_gemini()
    if not modelo:
        return "N√£o foi poss√≠vel gerar uma dica personalizada. Verifique a configura√ß√£o da API Key."
    
    dados = st.session_state.dados_financeiros
    saude = calcular_saude_financeira()
    
    try:
        # Construir prompt com dados do usu√°rio
        prompt_parts = [
            f"Gere uma dica financeira personalizada com base nos seguintes dados:",
            f"- Comprometimento de renda: {saude['comprometimento_renda']:.1f}%",
            f"- N√≠vel de endividamento: {saude['endividamento']:.1f}%",
            f"- Classifica√ß√£o da sa√∫de financeira: {saude['classificacao']}",
        ]
        
        # Adicionar informa√ß√µes sobre d√≠vidas, se dispon√≠veis
        if dados["dividas"]:
            prompt_parts.append("- Possui d√≠vidas ativas")
            
            # Adicionar tipos de d√≠vidas
            tipos_dividas = [nome for nome in dados["dividas"].keys()]
            prompt_parts.append(f"- Tipos de d√≠vidas: {', '.join(tipos_dividas)}")
        else:
            prompt_parts.append("- N√£o possui d√≠vidas ativas")
        
        # Adicionar informa√ß√µes sobre reserva de emerg√™ncia
        if saude["reserva_emergencia"] > 0:
            prompt_parts.append(f"- Possui reserva de emerg√™ncia para {saude['reserva_emergencia']:.1f} meses")
        else:
            prompt_parts.append("- N√£o possui reserva de emerg√™ncia")
        
        # Instru√ß√µes para o formato da dica
        prompt_parts.extend([
            "A dica deve ser:",
            "1. Espec√≠fica para a situa√ß√£o financeira descrita",
            "2. Pr√°tica e acion√°vel (algo que a pessoa possa implementar imediatamente)",
            "3. Motivadora e positiva",
            "4. Curta (m√°ximo de 3 frases)",
            "Responda em portugu√™s do Brasil."
        ])
        
        response = modelo.generate_content(prompt_parts)
        return response.text
    except Exception as e:
        return f"Erro ao gerar dica personalizada: {e}"

def gerar_conselho_financeiro(preocupacao):
    """
    Gera um conselho financeiro personalizado com base na preocupa√ß√£o do usu√°rio.
    
    Args:
        preocupacao (str): Preocupa√ß√£o financeira do usu√°rio
        
    Returns:
        str: Conselho financeiro personalizado
    """
    modelo = configurar_modelo_gemini()
    if not modelo:
        return "N√£o foi poss√≠vel gerar um conselho. Verifique a configura√ß√£o da API Key."
    
    dados = st.session_state.dados_financeiros
    nome = st.session_state.nome_usuario
    
    try:
        # Construir prompt para o modelo
        prompt_parts = [
            f"Meu nome √© {nome}.",
            f"Minha principal preocupa√ß√£o financeira √©: '{preocupacao}'.",
        ]
        
        # Adicionar informa√ß√µes financeiras, se dispon√≠veis
        if dados["renda_mensal"]:
            prompt_parts.append(f"Minha renda mensal aproximada √© de R${dados['renda_mensal']:.2f}.")
        
        # Adicionar informa√ß√µes sobre d√≠vidas, se dispon√≠veis
        for nome_divida, info_divida in dados["dividas"].items():
            if "valor_total" in info_divida:
                prompt_parts.append(f"Tenho uma d√≠vida de {nome_divida} no valor de R${info_divida['valor_total']:.2f}.")
        
        # Instru√ß√µes para o formato do conselho
        prompt_parts.extend([
            "\nVoc√™ √© um consultor financeiro experiente, emp√°tico, motivador e bem detalhista.",
            "Preciso de ajuda para lidar com essa situa√ß√£o.",
            "Forne√ßa para mim, em portugu√™s do Brasil:",
            "1. Uma mensagem curta de encorajamento e valida√ß√£o dos meus sentimentos (1-2 frases).",
            "2. Um Planejamento Financeira detalhado, com base na minha renda, despesa e d√≠vidas, de forma a tra√ßar um plano objetivo e alcan√ß√°vel.",
            "3. Esse planejamento dever√° conter valores, que demonstre como e quando eu posso atingir o objetivo de melhorar a sa√∫de financeira.",
            "4. Caso verifique que com a minha renda atual n√£o seja poss√≠vel alcan√ßar o objetivo, sugerir op√ß√µes de renda extra para que a renda seja maximizada e ent√£o, conseguir quitar d√≠vidas, ou metas financeiras.",
            "5. Uma dica extra ou uma reflex√£o positiva curta (1 frase).",
            "Seja claro, direto e use uma linguagem acess√≠vel. Evite jarg√µes financeiros complexos."
        ])
        
        # Gerar resposta
        response = modelo.generate_content(prompt_parts)
        
        # Registrar consulta no hist√≥rico
        st.session_state.historico_consultas.append({
            "data": datetime.now(),
            "preocupacao": preocupacao,
            "conselho": response.text
        })
        
        # Adicionar pontos pela consulta
        adicionar_pontos(10, "Solicitou um conselho financeiro")
        
        return response.text
    except Exception as e:
        return f"Erro ao gerar conselho: {e}"

def simular_negociacao_divida(credor, valor_divida, dias_atraso):
    """
    Simula uma negocia√ß√£o de d√≠vida usando o modelo Gemini.
    
    Args:
        credor (str): Nome do credor
        valor_divida (float): Valor da d√≠vida
        dias_atraso (int): Dias de atraso
        
    Returns:
        str: Simula√ß√£o de negocia√ß√£o
    """
    modelo = configurar_modelo_gemini()
    if not modelo:
        return "N√£o foi poss√≠vel simular a negocia√ß√£o. Verifique a configura√ß√£o da API Key."
    
    nome = st.session_state.nome_usuario
    
    try:
        # Construir prompt para o modelo
        prompt_parts = [
            f"Simule uma conversa de negocia√ß√£o de d√≠vida entre {nome} e um atendente do(a) {credor}.",
            f"Valor da d√≠vida: R${valor_divida:.2f}",
            f"Dias de atraso: {dias_atraso}",
            "\nA simula√ß√£o deve incluir:",
            "1. Sauda√ß√£o inicial do atendente",
            "2. Como o cliente (eu) deve se apresentar e explicar a situa√ß√£o",
            "3. Perguntas que o atendente provavelmente far√°",
            "4. Argumentos que posso usar para negociar um desconto ou parcelamento",
            "5. Poss√≠veis propostas do atendente",
            "6. Como devo responder a cada proposta",
            "7. Conclus√£o da negocia√ß√£o",
            "\nFormate como um di√°logo realista, com falas alternadas entre o atendente e o cliente.",
            "Use linguagem natural e realista para ambas as partes.",
            "Inclua dicas entre par√™nteses para me orientar durante a negocia√ß√£o.",
            "Responda em portugu√™s do Brasil."
        ]
        
        # Gerar resposta
        response = modelo.generate_content(prompt_parts)
        
        # Adicionar pontos pela simula√ß√£o
        adicionar_pontos(15, "Realizou uma simula√ß√£o de negocia√ß√£o")
        
        return response.text
    except Exception as e:
        return f"Erro ao simular negocia√ß√£o: {e}"

# --- Componentes da Interface ---
def exibir_cabecalho():
    """
    Exibe o cabe√ßalho da aplica√ß√£o com t√≠tulo e informa√ß√µes do usu√°rio.
    """
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.title("üåü Mentor Financeiro AI")
        st.markdown("### Seu assistente para trilhar o caminho da sa√∫de financeira!")
    
    with col2:
        if st.session_state.nome_usuario:
            st.markdown(f"### Ol√°, {st.session_state.nome_usuario}!")
            st.markdown(f"**N√≠vel:** {st.session_state.nivel}")
            st.markdown(f"**Pontos:** {st.session_state.pontos}")
            
            # Exibir medalha de acordo com o n√≠vel
            if st.session_state.nivel >= 5:
                st.markdown("üèÜ **Especialista Financeiro**")
            elif st.session_state.nivel >= 3:
                st.markdown("ü•à **Estrategista Financeiro**")
            elif st.session_state.nivel >= 1:
                st.markdown("ü•â **Aprendiz Financeiro**")

def exibir_barra_lateral():
    """
    Exibe a barra lateral com menu de navega√ß√£o e informa√ß√µes.
    """
    st.sidebar.title("Menu")
    
    # Verificar se o usu√°rio j√° forneceu o nome
    if st.session_state.nome_usuario:
        # Bot√µes de navega√ß√£o
        if st.sidebar.button("üìä Dashboard", use_container_width=True):
            st.session_state.pagina_atual = "dashboard"
        
        if st.sidebar.button("üí¨ Consultor Virtual", use_container_width=True):
            st.session_state.pagina_atual = "consultor"
        
        if st.sidebar.button("üìù Diagn√≥stico Financeiro", use_container_width=True):
            st.session_state.pagina_atual = "diagnostico"
        
        if st.sidebar.button("üéØ Desafios", use_container_width=True):
            st.session_state.pagina_atual = "desafios"
        
        if st.sidebar.button("üìö Conte√∫do Educacional", use_container_width=True):
            st.session_state.pagina_atual = "educacional"
        
        if st.sidebar.button("üèÜ Conquistas", use_container_width=True):
            st.session_state.pagina_atual = "conquistas"
        
        # Separador
        st.sidebar.markdown("---")
        
        # Informa√ß√µes do usu√°rio
        st.sidebar.markdown("### Seu Progresso")
        
        # Barra de progresso para o pr√≥ximo n√≠vel
        progresso_nivel = (st.session_state.pontos % 100) / 100
        st.sidebar.progress(progresso_nivel, text=f"Progresso para N√≠vel {st.session_state.nivel + 1}")
        
        # Exibir conquistas recentes
        if st.session_state.conquistas:
            st.sidebar.markdown("### Conquistas Recentes")
            for i, conquista in enumerate(st.session_state.conquistas[-3:]):
                st.sidebar.markdown(f"- {conquista}")
            
            if len(st.session_state.conquistas) > 3:
                st.sidebar.markdown(f"*...e mais {len(st.session_state.conquistas) - 3} conquistas*")
    
    # Configura√ß√£o da API
    st.sidebar.markdown("---")
    st.sidebar.markdown("### Configura√ß√µes")
    
    # Status da API
    if 'api_key_configurada' in st.session_state and st.session_state.api_key_configurada:
        st.sidebar.success("‚úÖ API Gemini configurada")
    else:
        st.sidebar.warning("‚ö†Ô∏è API Gemini n√£o configurada")
        configurar_api_key()
    
    # Informa√ß√µes sobre o aplicativo
    st.sidebar.markdown("---")
    st.sidebar.markdown("### Sobre")
    st.sidebar.info(
        "Mentor Financeiro AI\n\n"
        "Desenvolvido para fins educacionais\n\n"
        "Utiliza a API Gemini do Google para gerar conselhos financeiros personalizados."
        "O Conte√∫do aqui gerado utiliza-se de Intelig√™ncia Artificial, que pode cometer erros. Sempre procure ajuda profissional especializada!"
    )

# --- P√°ginas da Aplica√ß√£o ---
def pagina_boas_vindas():
    """
    Exibe a p√°gina de boas-vindas e coleta informa√ß√µes iniciais do usu√°rio.
    """
    st.markdown("## üëã Bem-vindo ao Mentor Financeiro!")
    
    st.markdown("""
    <div class="info-box">
        <h3>O que √© o Mentor Financeiro AI?</h3>
        <p>Eu fui desenvolvido como um assistente inteligente que utiliza IA para ajudar voc√™ a melhorar sua sa√∫de financeira, 
        oferecendo planejamentos financeiros personalizados, diagn√≥sticos financeiros e desafios para desenvolver 
        h√°bitos financeiros saud√°veis.</p>
        <p>Minha miss√£o √© ajudar pessoas em estado de endividamento a darem os primeiros passos para um vida financeira leve e tranquila!</p>        
    </div>
    """, unsafe_allow_html=True)
    
    # Coletar nome do usu√°rio
    nome = st.text_input("Para come√ßarmos, qual √© o seu nome?", key="input_nome")
    
    if st.button("Come√ßar Jornada", key="btn_comecar"):
        if nome:
            st.session_state.nome_usuario = nome
            st.session_state.pagina_atual = "dashboard"
            
            # Adicionar primeira conquista
            adicionar_conquista("In√≠cio da Jornada Financeira! üöÄ")
            adicionar_pontos(10, "Iniciou sua jornada financeira")
            
            st.success(f"Ol√°, {nome}! Bem-vindo √† sua jornada financeira!")
            st.balloons()  # Efeito visual de celebra√ß√£o
            
            # Recarregar a p√°gina para atualizar a interface
            st.rerun()
        else:
            st.error("Por favor, informe seu nome para continuar.")
    
    # Exibir recursos dispon√≠veis
    st.markdown("### Recursos dispon√≠veis:")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        - **Consultor Virtual Inteligente**: Tire suas d√∫vidas financeiras
        - **Diagn√≥stico Financeiro**: Avalie sua sa√∫de financeira
        - **Planos de A√ß√£o Personalizados**: Receba orienta√ß√µes espec√≠ficas
        """)
    
    with col2:
        st.markdown("""
        - **Desafios Financeiros**: Desenvolva h√°bitos saud√°veis
        - **Conte√∫do Educacional**: Aprenda sobre finan√ßas
        - **Sistema de Gamifica√ß√£o**: Ganhe pontos e conquistas
        """)

def pagina_dashboard():
    """
    Exibe o dashboard principal com resumo da situa√ß√£o financeira do usu√°rio.
    """
    st.markdown("## üìä Dashboard")
    
    # Verificar se h√° dados financeiros
    if not st.session_state.dados_financeiros["renda_mensal"]:
        st.warning("Voc√™ ainda n√£o completou seu diagn√≥stico financeiro. Complete-o para visualizar seu dashboard completo.")
        
        if st.button("Ir para Diagn√≥stico Financeiro"):
            st.session_state.pagina_atual = "diagnostico"
            st.rerun()
        
        # Exibir conte√∫do limitado
        st.markdown("### Dica do Dia")
        st.info(
            "üí° **Comece anotando todos os seus gastos!**\n\n"
            "O primeiro passo para melhorar sua sa√∫de financeira √© entender para onde seu dinheiro est√° indo. "
            "Anote todos os seus gastos por pelo menos uma semana para identificar padr√µes."
        )
        
        return
    
    # Calcular indicadores de sa√∫de financeira
    saude = calcular_saude_financeira()
    
    # Exibir resumo da sa√∫de financeira
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            label="Comprometimento de Renda",
            value=f"{saude['comprometimento_renda']:.1f}%",
            delta="-0.5%" if saude['comprometimento_renda'] < 80 else "0%"
        )
        
        if saude['comprometimento_renda'] > 80:
            st.error("‚ö†Ô∏è Acima do recomendado (80%)")
        elif saude['comprometimento_renda'] > 60:
            st.warning("‚ö†Ô∏è Aten√ß√£o! Pr√≥ximo do limite")
        else:
            st.success("‚úÖ Dentro do recomendado")
    
    with col2:
        st.metric(
            label="N√≠vel de Endividamento",
            value=f"{saude['endividamento']:.1f}%",
            delta="-1.2%" if saude['endividamento'] < 30 else "0%"
        )
        
        if saude['endividamento'] > 50:
            st.error("‚ö†Ô∏è Endividamento elevado")
        elif saude['endividamento'] > 30:
            st.warning("‚ö†Ô∏è Endividamento moderado")
        else:
            st.success("‚úÖ Endividamento controlado")
    
    with col3:
        st.metric(
            label="Score de Sa√∫de Financeira",
            value=f"{saude['score']}/100",
            delta="+5" if saude['score'] > 60 else "-2"
        )
        
        if saude['score'] >= 80:
            st.success(f"‚úÖ {saude['classificacao']}")
        elif saude['score'] >= 60:
            st.info(f"‚ÑπÔ∏è {saude['classificacao']}")
        elif saude['score'] >= 40:
            st.warning(f"‚ö†Ô∏è {saude['classificacao']}")
        else:
            st.error(f"‚ö†Ô∏è {saude['classificacao']}")
    
    # Exibir gr√°fico de despesas
    st.markdown("### Distribui√ß√£o de Despesas")
    
    grafico = gerar_grafico_despesas()
    if grafico:
        st.pyplot(grafico)
    else:
        st.info("Adicione suas despesas no diagn√≥stico financeiro para visualizar o gr√°fico.")
    
    # Exibir informa√ß√µes sobre d√≠vidas
    st.markdown("### Situa√ß√£o das D√≠vidas")
    
    if st.session_state.dados_financeiros["dividas"]:
        info_dividas = calcular_tempo_quitacao_dividas()
        
        # Exibir tempo total estimado
        if info_dividas["tempo_total_meses"] == float('inf'):
            st.error("‚ö†Ô∏è Com as parcelas atuais, algumas d√≠vidas nunca ser√£o quitadas (parcelas menores que os juros).")
        else:
            meses = info_dividas["tempo_total_meses"]
            anos = meses // 12
            meses_restantes = meses % 12
            
            if anos > 0:
                st.info(f"‚è±Ô∏è Tempo estimado para quitar todas as d√≠vidas: {int(anos)} anos e {int(meses_restantes)} meses")
            else:
                st.info(f"‚è±Ô∏è Tempo estimado para quitar todas as d√≠vidas: {int(meses)} meses")
        
        # Exibir m√©todo recomendado
        metodo = sugerir_metodo_quitacao()
        st.markdown(f"**M√©todo de quita√ß√£o recomendado:** {metodo['metodo']}")
        st.markdown(f"*{metodo['explicacao']}*")
        
        # Exibir tabela de d√≠vidas
        dados_tabela = []
        for nome, info in info_dividas["dividas"].items():
            divida = st.session_state.dados_financeiros["dividas"][nome]
            
            if info["tempo_meses"] == float('inf'):
                tempo = "Nunca (parcela < juros)"
            elif info["tempo_meses"] >= 12:
                anos = info["tempo_meses"] // 12
                meses = info["tempo_meses"] % 12
                tempo = f"{int(anos)}a {int(meses)}m"
            else:
                tempo = f"{int(info['tempo_meses'])}m"
            
            dados_tabela.append({
                "D√≠vida": nome,
                "Valor Total": f"R$ {divida['valor_total']:.2f}",
                "Parcela": f"R$ {divida['parcela_mensal']:.2f}",
                "Juros": f"{divida.get('taxa_juros_mensal', 0):.2f}% a.m.",
                "Tempo p/ Quitar": tempo,
                "Total de Juros": f"R$ {info['total_juros']:.2f}"
            })
        
        if dados_tabela:
            st.dataframe(pd.DataFrame(dados_tabela), hide_index=True)
    else:
        st.success("‚úÖ Voc√™ n√£o possui d√≠vidas cadastradas.")
    
    # Exibir dica personalizada
    st.markdown("### Dica Personalizada")
    dica = gerar_dica_financeira_personalizada()
    st.info(f"üí° {dica}")
    
    # Exibir desafios ativos
    if st.session_state.desafios_ativos:
        st.markdown("### Desafios Ativos")
        
        for desafio in st.session_state.desafios_ativos:
            dias_restantes = (desafio["data_fim"] - datetime.now()).days
            
            st.markdown(f"""
            <div class="challenge-card">
                <h4>{desafio['titulo']}</h4>
                <p>{desafio['descricao']}</p>
                <p><strong>Dificuldade:</strong> {desafio['dificuldade']} | <strong>Pontos:</strong> {desafio['pontos']}</p>
                <p><strong>Tempo restante:</strong> {max(0, dias_restantes)} dias</p>
            </div>
            """, unsafe_allow_html=True)

def pagina_consultor():
    """
    Exibe a p√°gina do consultor virtual para tirar d√∫vidas e receber conselhos.
    """
    st.markdown("## üí¨ Consultor Virtual Inteligente")
    
    st.markdown("""
    <div class="info-box">
        <p>Compartilhe suas preocupa√ß√µes financeiras e receba conselhos personalizados do nosso assistente virtual.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Abas para diferentes funcionalidades
    tab1, tab2, tab3 = st.tabs(["Conselho Financeiro", "Simulador de Negocia√ß√£o", "Gloss√°rio Financeiro"])
    
    # Aba de Conselho Financeiro
    with tab1:
        st.markdown("### Conselho Financeiro Personalizado")
        st.markdown("Compartilhe sua principal preocupa√ß√£o financeira e receba um conselho personalizado.")
        
        preocupacao = st.text_area(
            "Qual sua principal preocupa√ß√£o financeira no momento?",
            placeholder="Ex: N√£o consigo pagar meu cart√£o de cr√©dito com R$2000 em d√≠vidas",
            height=100
        )
        
        if st.button("Obter Conselho", key="btn_conselho"):
            if preocupacao:
                with st.spinner("Gerando conselho personalizado..."):
                    conselho = gerar_conselho_financeiro(preocupacao)
                    st.markdown(f"""
                    <div class="success-box">
                        {conselho}
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.error("Por favor, descreva sua preocupa√ß√£o para receber um conselho.")
        
        # Exibir hist√≥rico de consultas
        if st.session_state.historico_consultas:
            st.markdown("### Hist√≥rico de Consultas")
            
            for i, consulta in enumerate(reversed(st.session_state.historico_consultas)):
                if i >= 3:  # Limitar a 3 consultas no hist√≥rico
                    break
                
                with st.expander(f"Consulta de {consulta['data'].strftime('%d/%m/%Y %H:%M')}"):
                    st.markdown(f"**Preocupa√ß√£o:** {consulta['preocupacao']}")
                    st.markdown(f"**Conselho:**\n{consulta['conselho']}")
    
    # Aba de Simulador de Negocia√ß√£o
    with tab2:
        st.markdown("### Simulador de Negocia√ß√£o de D√≠vidas")
        st.markdown(
            "Este simulador cria um di√°logo de negocia√ß√£o para te ajudar a se preparar "
            "para uma conversa real com credores."
        )
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            credor = st.text_input(
                "Nome do Credor",
                placeholder="Ex: Banco XYZ, Loja ABC"
            )
        
        with col2:
            valor_divida = st.number_input(
                "Valor da D√≠vida (R$)",
                min_value=0.0,
                step=100.0
            )
        
        with col3:
            dias_atraso = st.number_input(
                "Dias de Atraso",
                min_value=0,
                max_value=3650,
                step=30
            )
        
        if st.button("Simular Negocia√ß√£o", key="btn_simular"):
            if credor and valor_divida > 0:
                with st.spinner("Gerando simula√ß√£o de negocia√ß√£o..."):
                    simulacao = simular_negociacao_divida(credor, valor_divida, dias_atraso)
                    st.markdown(f"""
                    <div class="info-box">
                        {simulacao}
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.error("Por favor, preencha o nome do credor e o valor da d√≠vida.")
    
    # Aba de Gloss√°rio Financeiro
    with tab3:
        st.markdown("### Gloss√°rio Financeiro")
        st.markdown(
            "Tire suas d√∫vidas sobre termos financeiros e receba explica√ß√µes simples e did√°ticas."
        )
        
        # Lista de termos comuns para sugest√£o
        termos_comuns = [
            "Juros Compostos", "CDI", "Selic", "CDB", "Tesouro Direto", 
            "Infla√ß√£o", "Reserva de Emerg√™ncia", "Diversifica√ß√£o",
            "Renda Fixa", "Renda Vari√°vel", "A√ß√µes", "FGC", "IOF", "IR",
            "Previd√™ncia Privada", "Portabilidade de D√≠vida", "Score de Cr√©dito"
        ]
        
        # Campo para digitar o termo ou selecionar da lista
        termo = st.selectbox(
            "Selecione ou digite um termo financeiro",
            options=[""] + termos_comuns,
            index=0
        )
        
        # Ou digite um termo personalizado
        termo_personalizado = st.text_input(
            "Ou digite outro termo financeiro",
            placeholder="Ex: Educa√ß√£o Financeira, Cart√£o de Cr√©dito"
        )
        
        # Usar o termo personalizado se fornecido, caso contr√°rio usar o selecionado
        termo_final = termo_personalizado if termo_personalizado else termo
        
        if st.button("Explicar Termo", key="btn_explicar"):
            if termo_final:
                with st.spinner(f"Buscando explica√ß√£o para '{termo_final}'..."):
                    explicacao = obter_explicacao_termo_financeiro(termo_final)
                    st.markdown(f"""
                    <div class="info-box">
                        <h4>{termo_final}</h4>
                        {explicacao}
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Adicionar pontos por aprender um novo termo
                    adicionar_pontos(5, f"Aprendeu sobre {termo_final}")
            else:
                st.error("Por favor, selecione ou digite um termo financeiro.")

def pagina_diagnostico():
    """
    Exibe a p√°gina de diagn√≥stico financeiro para coletar dados do usu√°rio.
    """
    st.markdown("## üìù Diagn√≥stico Financeiro")
    
    st.markdown("""
    <div class="info-box">
        <p>Preencha as informa√ß√µes abaixo para receber um diagn√≥stico completo da sua sa√∫de financeira 
        e recomenda√ß√µes personalizadas.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Criar abas para diferentes se√ß√µes do diagn√≥stico
    tab1, tab2, tab3, tab4 = st.tabs(["Renda", "Despesas", "D√≠vidas", "Metas"])
    
    # Aba de Renda
    with tab1:
        st.markdown("### Informa√ß√µes de Renda")
        
        # Renda mensal
        renda_mensal = st.number_input(
            "Renda Mensal Total (R$)",
            min_value=0.0,
            value=st.session_state.dados_financeiros["renda_mensal"] or 0.0,
            step=100.0
        )
        
        # Reserva de emerg√™ncia
        reserva_emergencia = st.number_input(
            "Reserva de Emerg√™ncia (R$)",
            min_value=0.0,
            value=st.session_state.dados_financeiros.get("reserva_emergencia", 0.0),
            step=100.0,
            help="Valor total dispon√≠vel em sua reserva de emerg√™ncia"
        )
        
        # Outras fontes de renda
        st.markdown("#### Outras Fontes de Renda (opcional)")
        
        col1, col2 = st.columns(2)
        
        with col1:
            fonte_extra = st.text_input(
                "Descri√ß√£o da Fonte de Renda",
                placeholder="Ex: Freelance, Aluguel"
            )
        
        with col2:
            valor_extra = st.number_input(
                "Valor Mensal (R$)",
                min_value=0.0,
                step=100.0
            )
        
        if st.button("Adicionar Fonte de Renda", key="btn_add_renda"):
            if fonte_extra and valor_extra > 0:
                if "outras_rendas" not in st.session_state.dados_financeiros:
                    st.session_state.dados_financeiros["outras_rendas"] = {}
                
                st.session_state.dados_financeiros["outras_rendas"][fonte_extra] = valor_extra
                st.success(f"Fonte de renda '{fonte_extra}' adicionada com sucesso!")
                
                # Limpar campos
                st.rerun()
        
        # Exibir fontes de renda cadastradas
        if "outras_rendas" in st.session_state.dados_financeiros and st.session_state.dados_financeiros["outras_rendas"]:
            st.markdown("#### Fontes de Renda Cadastradas")
            
            for fonte, valor in st.session_state.dados_financeiros["outras_rendas"].items():
                st.markdown(f"- **{fonte}**: R$ {valor:.2f}")
        
        # Bot√£o para salvar informa√ß√µes de renda
        if st.button("Salvar Informa√ß√µes de Renda", key="btn_salvar_renda"):
            st.session_state.dados_financeiros["renda_mensal"] = renda_mensal
            st.session_state.dados_financeiros["reserva_emergencia"] = reserva_emergencia
            
            st.success("‚úÖ Informa√ß√µes de renda salvas com sucesso!")
            
            # Adicionar pontos se for a primeira vez
            if not st.session_state.diagnostico_realizado:
                adicionar_pontos(20, "Iniciou seu diagn√≥stico financeiro")
    
    # Aba de Despesas
    with tab2:
        st.markdown("### Despesas Mensais")
        
        # Separar em despesas fixas e vari√°veis
        despesa_tipo = st.radio(
            "Tipo de Despesa",
            options=["Fixa", "Vari√°vel"],
            horizontal=True,
            help="Despesas fixas s√£o aquelas que t√™m valor constante todo m√™s. Despesas vari√°veis podem mudar de valor ou frequ√™ncia."
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            categoria_despesa = st.text_input(
                "Categoria da Despesa",
                placeholder="Ex: Aluguel, Supermercado, Lazer"
            )
        
        with col2:
            valor_despesa = st.number_input(
                "Valor Mensal (R$)",
                min_value=0.0,
                step=10.0
            )
        
        if st.button("Adicionar Despesa", key="btn_add_despesa"):
            if categoria_despesa and valor_despesa > 0:
                # Determinar o dicion√°rio correto com base no tipo
                dict_alvo = "despesas_fixas" if despesa_tipo == "Fixa" else "despesas_variaveis"
                
                # Adicionar despesa
                st.session_state.dados_financeiros[dict_alvo][categoria_despesa] = valor_despesa
                st.success(f"Despesa '{categoria_despesa}' adicionada com sucesso!")
                
                # Limpar campos
                st.rerun()
        
        # Exibir despesas cadastradas
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### Despesas Fixas")
            
            if st.session_state.dados_financeiros["despesas_fixas"]:
                for categoria, valor in st.session_state.dados_financeiros["despesas_fixas"].items():
                    st.markdown(f"- **{categoria}**: R$ {valor:.2f}")
                
                total_fixas = sum(st.session_state.dados_financeiros["despesas_fixas"].values())
                st.markdown(f"**Total: R$ {total_fixas:.2f}**")
            else:
                st.info("Nenhuma despesa fixa cadastrada.")
        
        with col2:
            st.markdown("#### Despesas Vari√°veis")
            
            if st.session_state.dados_financeiros["despesas_variaveis"]:
                for categoria, valor in st.session_state.dados_financeiros["despesas_variaveis"].items():
                    st.markdown(f"- **{categoria}**: R$ {valor:.2f}")
                
                total_variaveis = sum(st.session_state.dados_financeiros["despesas_variaveis"].values())
                st.markdown(f"**Total: R$ {total_variaveis:.2f}**")
            else:
                st.info("Nenhuma despesa vari√°vel cadastrada.")
        
        # Bot√£o para limpar todas as despesas
        if st.button("Limpar Todas as Despesas", key="btn_limpar_despesas"):
            st.session_state.dados_financeiros["despesas_fixas"] = {}
            st.session_state.dados_financeiros["despesas_variaveis"] = {}
            st.success("‚úÖ Todas as despesas foram removidas.")
            st.rerun()
    
    # Aba de D√≠vidas
    with tab3:
        st.markdown("### D√≠vidas Ativas")
        
        # Formul√°rio para adicionar d√≠vida
        col1, col2 = st.columns(2)
        
        with col1:
            nome_divida = st.text_input(
                "Nome/Descri√ß√£o da D√≠vida",
                placeholder="Ex: Cart√£o Banco XYZ, Financiamento Carro"
            )
            
            valor_total = st.number_input(
                "Valor Total da D√≠vida (R$)",
                min_value=0.0,
                step=100.0
            )
            
            parcela_mensal = st.number_input(
                "Valor da Parcela Mensal (R$)",
                min_value=0.0,
                step=10.0
            )
        
        with col2:
            taxa_juros = st.number_input(
                "Taxa de Juros Mensal (%)",
                min_value=0.0,
                max_value=20.0,
                step=0.1,
                help="Taxa de juros mensal. Ex: 3.5 para 3,5% ao m√™s"
            )
            
            data_vencimento = st.date_input(
                "Data de Vencimento Mensal",
                value=None,
                help="Data de vencimento mensal da parcela"
            )
            
            total_parcelas = st.number_input(
                "Total de Parcelas",
                min_value=0,
                step=1,
                help="N√∫mero total de parcelas. Deixe 0 se n√£o souber ou n√£o for parcelado."
            )
        
        if st.button("Adicionar D√≠vida", key="btn_add_divida"):
            if nome_divida and valor_total > 0:
                # Criar dicion√°rio com informa√ß√µes da d√≠vida
                nova_divida = {
                    "valor_total": valor_total,
                    "parcela_mensal": parcela_mensal,
                    "taxa_juros_mensal": taxa_juros,
                    "data_vencimento": data_vencimento.strftime("%d/%m/%Y") if data_vencimento else None,
                    "total_parcelas": total_parcelas if total_parcelas > 0 else None
                }
                
                # Adicionar √† lista de d√≠vidas
                st.session_state.dados_financeiros["dividas"][nome_divida] = nova_divida
                st.success(f"D√≠vida '{nome_divida}' adicionada com sucesso!")
                
                # Limpar campos
                st.rerun()
        
        # Exibir d√≠vidas cadastradas
        if st.session_state.dados_financeiros["dividas"]:
            st.markdown("#### D√≠vidas Cadastradas")
            
            for nome, info in st.session_state.dados_financeiros["dividas"].items():
                with st.expander(f"{nome} - R$ {info['valor_total']:.2f}"):
                    st.markdown(f"**Valor Total:** R$ {info['valor_total']:.2f}")
                    st.markdown(f"**Parcela Mensal:** R$ {info['parcela_mensal']:.2f}")
                    st.markdown(f"**Taxa de Juros:** {info['taxa_juros_mensal']:.2f}% ao m√™s")
                    
                    if info['data_vencimento']:
                        st.markdown(f"**Vencimento:** {info['data_vencimento']}")
                    
                    if info['total_parcelas']:
                        st.markdown(f"**Total de Parcelas:** {info['total_parcelas']}")
                    
                    # Bot√£o para remover d√≠vida
                    if st.button(f"Remover {nome}", key=f"btn_remover_{nome}"):
                        del st.session_state.dados_financeiros["dividas"][nome]
                        st.success(f"D√≠vida '{nome}' removida com sucesso!")
                        st.rerun()
        else:
            st.info("Nenhuma d√≠vida cadastrada.")
    
    # Aba de Metas
    with tab4:
        st.markdown("### Metas Financeiras")
        
        # Formul√°rio para adicionar meta
        col1, col2 = st.columns(2)
        
        with col1:
            nome_meta = st.text_input(
                "Descri√ß√£o da Meta",
                placeholder="Ex: Comprar um carro, Quitar d√≠vidas"
            )
            
            valor_meta = st.number_input(
                "Valor Necess√°rio (R$)",
                min_value=0.0,
                step=100.0
            )
        
        with col2:
            prazo_meta = st.number_input(
                "Prazo (meses)",
                min_value=1,
                step=1
            )
            
            prioridade = st.selectbox(
                "Prioridade",
                options=["Alta", "M√©dia", "Baixa"]
            )
        
        if st.button("Adicionar Meta", key="btn_add_meta"):
            if nome_meta and valor_meta > 0 and prazo_meta > 0:
                # Criar dicion√°rio com informa√ß√µes da meta
                nova_meta = {
                    "valor": valor_meta,
                    "prazo_meses": prazo_meta,
                    "prioridade": prioridade,
                    "valor_mensal": valor_meta / prazo_meta,
                    "data_criacao": datetime.now().strftime("%d/%m/%Y")
                }
                
                # Adicionar √† lista de metas
                st.session_state.dados_financeiros["metas"][nome_meta] = nova_meta
                st.success(f"Meta '{nome_meta}' adicionada com sucesso!")
                
                # Adicionar pontos e conquista
                if len(st.session_state.dados_financeiros["metas"]) == 1:
                    adicionar_pontos(15, "Definiu sua primeira meta financeira")
                    adicionar_conquista("Primeira Meta Definida! üéØ")
                
                # Limpar campos
                st.rerun()
        
        # Exibir metas cadastradas
        if st.session_state.dados_financeiros["metas"]:
            st.markdown("#### Metas Cadastradas")
            
            for nome, info in st.session_state.dados_financeiros["metas"].items():
                with st.expander(f"{nome} - R$ {info['valor']:.2f}"):
                    st.markdown(f"**Valor Total:** R$ {info['valor']:.2f}")
                    st.markdown(f"**Prazo:** {info['prazo_meses']} meses")
                    st.markdown(f"**Valor Mensal Necess√°rio:** R$ {info['valor_mensal']:.2f}")
                    st.markdown(f"**Prioridade:** {info['prioridade']}")
                    st.markdown(f"**Data de Cria√ß√£o:** {info['data_criacao']}")
                    
                    # Bot√£o para remover meta
                    if st.button(f"Remover {nome}", key=f"btn_remover_meta_{nome}"):
                        del st.session_state.dados_financeiros["metas"][nome]
                        st.success(f"Meta '{nome}' removida com sucesso!")
                        st.rerun()
        else:
            st.info("Nenhuma meta cadastrada.")
    
    # Bot√£o para finalizar diagn√≥stico
    if st.button("Finalizar Diagn√≥stico", key="btn_finalizar"):
        # Verificar se h√° informa√ß√µes m√≠nimas
        if not st.session_state.dados_financeiros["renda_mensal"]:
            st.error("Por favor, informe sua renda mensal na aba 'Renda'.")
        else:
            st.session_state.diagnostico_realizado = True
            
            # Adicionar pontos e conquista
            if "diagnostico_completo" not in st.session_state.conquistas:
                adicionar_pontos(30, "Completou o diagn√≥stico financeiro")
                adicionar_conquista("Diagn√≥stico Completo! üìä")
            
            st.success("‚úÖ Diagn√≥stico financeiro conclu√≠do com sucesso!")
            st.balloons()
            
            # Redirecionar para o dashboard
            st.session_state.pagina_atual = "dashboard"
            st.rerun()

def pagina_desafios():
    """
    Exibe a p√°gina de desafios financeiros para o usu√°rio.
    """
    st.markdown("## üéØ Desafios Financeiros")
    
    st.markdown("""
    <div class="info-box">
        <p>Desafios ajudam a desenvolver h√°bitos financeiros saud√°veis de forma divertida. 
        Complete-os para ganhar pontos e melhorar sua sa√∫de financeira!</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Bot√£o para gerar novo desafio
    if st.button("Gerar Novo Desafio", key="btn_novo_desafio"):
        desafio = gerar_desafio_aleatorio()
        st.markdown(f"""
        <div class="challenge-card">
            <h3>{desafio['titulo']}</h3>
            <p>{desafio['descricao']}</p>
            <p><strong>Dificuldade:</strong> {desafio['dificuldade']} | <strong>Pontos:</strong> {desafio['pontos']}</p>
            <p><strong>Dura√ß√£o:</strong> {desafio['duracao_dias']} dias</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Bot√£o para aceitar desafio
        if st.button("Aceitar Desafio", key="btn_aceitar"):
            aceitar_desafio(desafio)
            st.rerun()
    
    # Exibir desafios ativos
    if st.session_state.desafios_ativos:
        st.markdown("### Desafios Ativos")
        
        for i, desafio in enumerate(st.session_state.desafios_ativos):
            dias_restantes = (desafio["data_fim"] - datetime.now()).days
            
            with st.expander(f"{desafio['titulo']} ({max(0, dias_restantes)} dias restantes)"):
                st.markdown(f"**Descri√ß√£o:** {desafio['descricao']}")
                st.markdown(f"**Dificuldade:** {desafio['dificuldade']}")
                st.markdown(f"**Pontos:** {desafio['pontos']}")
                st.markdown(f"**Data de In√≠cio:** {desafio['data_inicio'].strftime('%d/%m/%Y')}")
                st.markdown(f"**Data de T√©rmino:** {desafio['data_fim'].strftime('%d/%m/%Y')}")
                
                # Bot√£o para concluir desafio
                if st.button(f"Marcar como Conclu√≠do", key=f"btn_concluir_{i}"):
                    concluir_desafio(i)
                    st.rerun()
                
                # Bot√£o para abandonar desafio
                if st.button(f"Abandonar Desafio", key=f"btn_abandonar_{i}"):
                    st.session_state.desafios_ativos.pop(i)
                    st.warning("Desafio abandonado.")
                    st.rerun()
    else:
        st.info("Voc√™ n√£o possui desafios ativos no momento. Gere um novo desafio para come√ßar!")
    
    # Exibir desafios conclu√≠dos
    if st.session_state.desafios_concluidos:
        st.markdown("### Desafios Conclu√≠dos")
        
        for desafio in st.session_state.desafios_concluidos:
            st.markdown(f"""
            <div class="success-box">
                <h4>{desafio['titulo']} ‚úÖ</h4>
                <p>{desafio['descricao']}</p>
                <p><strong>Pontos ganhos:</strong> {desafio['pontos']}</p>
            </div>
            """, unsafe_allow_html=True)

def pagina_educacional():
    """
    Exibe a p√°gina de conte√∫do educacional sobre finan√ßas.
    """
    st.markdown("## üìö Conte√∫do Educacional")
    
    st.markdown("""
    <div class="info-box">
        <p>Aprenda conceitos financeiros importantes de forma simples e pr√°tica.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # M√≥dulos educacionais
    modulos = [
        {
            "titulo": "Fundamentos de Finan√ßas Pessoais",
            "descricao": "Aprenda os conceitos b√°sicos para organizar suas finan√ßas.",
            "topicos": [
                "Or√ßamento pessoal e familiar",
                "Diferen√ßa entre necessidades e desejos",
                "Como criar uma reserva de emerg√™ncia",
                "Planejamento financeiro de curto e longo prazo"
            ]
        },
        {
            "titulo": "Gest√£o de D√≠vidas",
            "descricao": "Estrat√©gias para sair das d√≠vidas e manter-se no azul.",
            "topicos": [
                "Como identificar d√≠vidas priorit√°rias",
                "M√©todos de quita√ß√£o: Bola de Neve vs. Avalanche",
                "Negocia√ß√£o com credores",
                "Consolida√ß√£o de d√≠vidas"
            ]
        },
        {
            "titulo": "Investimentos para Iniciantes",
            "descricao": "Primeiros passos no mundo dos investimentos.",
            "topicos": [
                "Renda fixa vs. Renda vari√°vel",
                "Perfil de investidor",
                "Diversifica√ß√£o e risco",
                "Investimentos para diferentes objetivos"
            ]
        }
    ]
    
    # Exibir m√≥dulos em cards
    for i, modulo in enumerate(modulos):
        st.markdown(f"""
        <div class="challenge-card">
            <h3>{modulo['titulo']}</h3>
            <p>{modulo['descricao']}</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Expandir para mostrar t√≥picos
        with st.expander("Ver t√≥picos"):
            for topico in modulo["topicos"]:
                st.markdown(f"- {topico}")
            
            # Bot√£o para acessar m√≥dulo
            if st.button(f"Acessar M√≥dulo", key=f"btn_modulo_{i}"):
                st.session_state.modulo_atual = i
                
                # Adicionar pontos por acessar m√≥dulo educacional
                adicionar_pontos(5, f"Acessou o m√≥dulo {modulo['titulo']}")
                
                # Exibir conte√∫do do m√≥dulo
                st.markdown(f"## {modulo['titulo']}")
                st.markdown(f"*{modulo['descricao']}*")
                
                # Conte√∫do simulado do m√≥dulo
                st.markdown("### Conte√∫do do M√≥dulo")
                st.info(
                    "Este √© um exemplo de conte√∫do educacional. Em uma implementa√ß√£o completa, "
                    "aqui seriam exibidos textos, v√≠deos e exerc√≠cios interativos sobre o tema."
                )
                
                # Bot√£o para marcar como conclu√≠do
                if st.button("Marcar como Conclu√≠do", key=f"btn_concluir_modulo_{i}"):
                    adicionar_pontos(15, f"Concluiu o m√≥dulo {modulo['titulo']}")
                    adicionar_conquista(f"M√≥dulo Conclu√≠do: {modulo['titulo']}! üìö")
                    st.success(f"M√≥dulo '{modulo['titulo']}' conclu√≠do com sucesso!")
                    st.balloons()
    
    # Dicas r√°pidas
    st.markdown("### Dicas R√°pidas")
    
    dicas = [
        {
            "titulo": "Regra 50-30-20",
            "descricao": "Divida seu or√ßamento em 50% para necessidades, 30% para desejos e 20% para poupan√ßa e investimentos."
        },
        {
            "titulo": "Efeito Latte",
            "descricao": "Pequenos gastos di√°rios (como um caf√©) podem somar quantias significativas ao longo do tempo."
        },
        {
            "titulo": "Fundo de Emerg√™ncia",
            "descricao": "Tente guardar o equivalente a 3-6 meses de despesas para emerg√™ncias."
        }
    ]
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"""
        <div class="info-box">
            <h4>{dicas[0]['titulo']}</h4>
            <p>{dicas[0]['descricao']}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="info-box">
            <h4>{dicas[1]['titulo']}</h4>
            <p>{dicas[1]['descricao']}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="info-box">
            <h4>{dicas[2]['titulo']}</h4>
            <p>{dicas[2]['descricao']}</p>
        </div>
        """, unsafe_allow_html=True)

def pagina_conquistas():
    """
    Exibe a p√°gina de conquistas e progresso do usu√°rio.
    """
    st.markdown("## üèÜ Conquistas e Progresso")
    
    # Exibir informa√ß√µes de n√≠vel e pontos
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"### N√≠vel Atual: {st.session_state.nivel}")
        
        # Barra de progresso para o pr√≥ximo n√≠vel
        progresso_nivel = (st.session_state.pontos % 100) / 100
        st.progress(progresso_nivel, text=f"Progresso para N√≠vel {st.session_state.nivel + 1}: {int(progresso_nivel * 100)}%")
        
        # Pontos totais
        st.markdown(f"**Pontos Totais:** {st.session_state.pontos}")
        
        # Pontos para pr√≥ximo n√≠vel
        pontos_proximo = 100 - (st.session_state.pontos % 100)
        st.markdown(f"**Pontos para o pr√≥ximo n√≠vel:** {pontos_proximo}")
    
    with col2:
        # Medalha de acordo com o n√≠vel
        if st.session_state.nivel >= 5:
            st.markdown("""
            <div style="text-align: center;">
                <h1 style="font-size: 4rem;">üèÜ</h1>
                <h3>Especialista Financeiro</h3>
            </div>
            """, unsafe_allow_html=True)
        elif st.session_state.nivel >= 3:
            st.markdown("""
            <div style="text-align: center;">
                <h1 style="font-size: 4rem;">ü•à</h1>
                <h3>Estrategista Financeiro</h3>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div style="text-align: center;">
                <h1 style="font-size: 4rem;">ü•â</h1>
                <h3>Aprendiz Financeiro</h3>
            </div>
            """, unsafe_allow_html=True)
    
    # Exibir conquistas
    st.markdown("### Suas Conquistas")
    
    if st.session_state.conquistas:
        # Organizar conquistas em colunas
        cols = st.columns(3)
        
        for i, conquista in enumerate(st.session_state.conquistas):
            with cols[i % 3]:
                st.markdown(f"""
                <div class="success-box">
                    <h4>{conquista}</h4>
                </div>
                """, unsafe_allow_html=True)
    else:
        st.info("Voc√™ ainda n√£o possui conquistas. Continue usando o aplicativo para desbloquear conquistas!")
    
    # Exibir estat√≠sticas
    st.markdown("### Estat√≠sticas")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            label="Consultas Realizadas",
            value=len(st.session_state.historico_consultas),
            delta=None
        )
    
    with col2:
        st.metric(
            label="Desafios Conclu√≠dos",
            value=len(st.session_state.desafios_concluidos),
            delta=None
        )
    
    with col3:
        # Calcular dias de uso (simulado)
        dias_uso = len(st.session_state.historico_consultas) + 1
        
        st.metric(
            label="Dias de Uso",
            value=dias_uso,
            delta=None
        )
    
    # Pr√≥ximas conquistas a desbloquear
    st.markdown("### Pr√≥ximas Conquistas")
    
    proximas_conquistas = [
        "Complete 5 desafios financeiros üéØ",
        "Atinja o N√≠vel 3 de experi√™ncia üåü",
        "Mantenha despesas abaixo de 70% da renda por 30 dias üí∞",
        "Crie um plano completo de quita√ß√£o de d√≠vidas üìù",
        "Aprenda 10 termos financeiros no gloss√°rio üìö"
    ]
    
    # Filtrar conquistas que o usu√°rio ainda n√£o possui
    for conquista in proximas_conquistas:
        if not any(c in conquista for c in st.session_state.conquistas):
            st.markdown(f"- {conquista}")

# --- Fun√ß√£o Principal ---
def main():
    """
    Fun√ß√£o principal que controla o fluxo da aplica√ß√£o.
    """
    # Inicializar sess√£o
    inicializar_sessao()
    
    # Exibir cabe√ßalho
    exibir_cabecalho()
    
    # Exibir barra lateral
    exibir_barra_lateral()
    
    # Exibir p√°gina atual
    if st.session_state.pagina_atual == "boas_vindas":
        pagina_boas_vindas()
    elif st.session_state.pagina_atual == "dashboard":
        pagina_dashboard()
    elif st.session_state.pagina_atual == "consultor":
        pagina_consultor()
    elif st.session_state.pagina_atual == "diagnostico":
        pagina_diagnostico()
    elif st.session_state.pagina_atual == "desafios":
        pagina_desafios()
    elif st.session_state.pagina_atual == "educacional":
        pagina_educacional()
    elif st.session_state.pagina_atual == "conquistas":
        pagina_conquistas()

# Executar aplica√ß√£o
if __name__ == "__main__":
    main()
