import google.generativeai as genai
import os
import time
import json
import streamlit as st

# --- Configura√ß√£o da API Key ---
try:
    api_key = st.secrets.get("GOOGLE_API_KEY")
    if not api_key:
        st.error(
            "Vari√°vel de ambiente GOOGLE_API_KEY n√£o encontrada. Por favor, configure-a no arquivo secrets.toml do Streamlit."
        )
        st.stop()
    genai.configure(api_key=api_key)
except Exception as e:
    st.error(f"Erro ao configurar a API Key: {e}")
    st.error(
        "Verifique se voc√™ configurou a vari√°vel de ambiente GOOGLE_API_KEY corretamente."
    )
    st.stop()

# --- Configura√ß√£o do Modelo Generativo ---
generation_config = {
    "temperature": 0.75,
    "top_p": 1,
    "top_k": 1,
    "max_output_tokens": 2048,
}

safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
]

try:
    model = genai.GenerativeModel(
        model_name="gemini-2.0-flash",
        generation_config=generation_config,
        safety_settings=safety_settings,
    )
except Exception as e:
    st.error(f"Erro ao inicializar o modelo Gemini: {e}")
    st.stop()

# --- Defini√ß√£o das Conquistas ---
conquistas = {
    5: "üèÜNovato FinanceiroüèÜ",
    10: "üèÜAprendiz das Finan√ßasüèÜ",
    15: "üèÜEntusiasta FinanceiroüèÜ",
    20: "üèÜMestre das Finan√ßasüèÜ",
    25: "üèÜGuru FinanceiroüèÜ",
    30: "üèÜOr√°culo FinanceiroüèÜ",
}


# --- Fun√ß√µes Auxiliares ---
def exibir_mensagem_boas_vindas():
    """Exibe uma mensagem de boas-vindas ao usu√°rio."""
    st.title("üåü Bem-vindo ao Mentor Financeiro AI! üåü")
    st.write("üïµÔ∏è Seu assistente para trilhar o caminho da sa√∫de financeira.")
    st.write(
        "üéâ Ao longo dessa jornada, quanto mais voc√™ perguntar, maior ser√° sua pontua√ß√£o!."
    )
    st.write(
        "üèÜ Quanto mais insights financeiros voc√™ obtiver, voc√™ ir√° melhorar a sua sa√∫de financeira e ainda obter mais conhecimento e desbloquear conquistas!"
    )



def coletar_dados_usuario(nome_usuario_ja_coletado=None):
    """Coleta informa√ß√µes b√°sicas e financeiras do usu√°rio."""
    nome = nome_usuario_ja_coletado or st.session_state.nome if nome_usuario_ja_coletado or 'nome' in st.session_state else st.text_input("Ol√°! Para come√ßarmos, qual o seu nome?").strip()
    if not nome:
        st.warning(
            "Hummmm, voc√™ n√£o informou seu nome! Para come√ßarmos nossa jornada, insira o seu nome!."
        )
        st.stop()
    st.write(f"\nPrazer em te conhecer, {nome}! Fico muito feliz em ter voc√™ por aqui!")
    st.session_state.nome = nome  # Salva o nome no session_state

    preocupacao = st.text_input(
        f"\n{nome}, vamos come√ßar com o seguinte: Qual sua principal preocupa√ß√£o financeira ou d√≠vida no momento? \n"
        "(Ex: 'cart√£o de cr√©dito com R$2000', 'n√£o consigo guardar dinheiro', 'quero renegociar meu financiamento')", key="preocupacao"
    ).strip()
    if not preocupacao:
        st.warning(
            "N√£o fique acanhado, conta comigo nesse processo! Agora, descreva sua preocupa√ß√£o para que eu possa te ajudar."
        )
        st.stop()
    st.session_state.preocupacao = preocupacao

    renda_mensal_str = st.text_input(
        f"\nPara te ajudar melhor, qual sua renda mensal aproximada? (Pressione Enter se preferir n√£o informar ou sua preocupa√ß√£o n√£o precise dessa informa√ß√£o): R$ ", key="renda_mensal"
    ).strip()
    renda_mensal = None
    if renda_mensal_str:
        try:
            renda_mensal = float(renda_mensal_str.replace(",", "."))
        except ValueError:
            st.error("Valor de renda inv√°lido, seguirei sem essa informa√ß√£o.")
            renda_mensal = None
    st.session_state.renda_mensal = renda_mensal

    despesa_mensal_str = st.text_input(
        f"\nSe preferir, Poderia informar sua despesa mensal total estimada? (Pressione Enter se preferir n√£o informar ou sua preocupa√ß√£o n√£o precise dessa informa√ß√£o): R$ ", key="despesa_mensal"
    ).strip()
    despesa_mensal = None
    if despesa_mensal_str:
        try:
            despesa_mensal = float(despesa_mensal_str.replace(",", "."))
        except ValueError:
            st.error("Valor de despesa inv√°lido, seguirei sem essa informa√ß√£o.")
            despesa_mensal = None
    st.session_state.despesa_mensal = despesa_mensal

    valor_divida_str = st.text_input(
        f"\nSe sua preocupa√ß√£o √© uma d√≠vida espec√≠fica, ou se voc√™ tem um montate total de d√≠vidas, qual o valor aproximado dela(s)? (Pressione Enter se n√£o aplic√°vel ou n√£o quiser informar): R$ ", key="valor_divida"
    ).strip()
    valor_divida = None
    if valor_divida_str:
        try:
            valor_divida = float(valor_divida_str.replace(",", "."))
        except ValueError:
            st.error("Valor de d√≠vida inv√°lido, seguirei sem essa informa√ß√£o.")
            valor_divida = None
    st.session_state.valor_divida = valor_divida
    return nome, preocupacao, renda_mensal, despesa_mensal, valor_divida



def gerar_conselho_financeiro_avancado(
    nome_usuario,
    preocupacao_usuario,
    renda_mensal=None,
    despesa_mensal=None,
    valor_divida=None,
):
    """
    Usa a API Gemini para gerar um conselho financeiro mais elaborado.
    """
    st.write("\nüß† Aguarde enquanto O Mentor Financeiro IA processa suas informa√ß√µes...")
    time.sleep(1)

    prompt_parts = [
        f"Meu nome √© {nome_usuario}.",
        f"Minha principal preocupa√ß√£o financeira √©: '{preocupacao_usuario}'.",
    ]
    if renda_mensal is not None:
        prompt_parts.append(f"Minha renda mensal aproximada √© de R${renda_mensal:.2f}.")
    if despesa_mensal is not None:
        prompt_parts.append(f"Minha despesa mensal aproximada √© de R${despesa_mensal:.2f}.")
    if valor_divida is not None:
        prompt_parts.append(f"O valor aproximado dessa d√≠vida/preocupa√ß√£o √© de R${valor_divida:.2f}.")

    prompt_parts.extend([
        "\nVoc√™ √© um consultor financeiro experiente, emp√°tico, motivador e detalhista.",
        "Preciso de ajuda para lidar com essa situa√ß√£o descrita.",
        "Forne√ßa para mim, em portugu√™s do Brasil:",
        "1. Uma mensagem curta de encorajamento e valida√ß√£o dos meus sentimentos (1-2 frases).",
        "2. Caso eu tenha informa minha renda, despesa e d√≠vida, elabore um plano financeiro detalhado, de forma a me propor solu√ß√µes bem estruturadas de como corrigir minha situa√ß√£o financeira.",
        "3. Caso minha renda n√£o seja suficiente para tra√ßar um plano, me sugira forma de conseguir uma renda extra, para conseguir ajustar a sa√∫de financeira",
        "4. Uma dica extra ou uma reflex√£o positiva curta (1 frase).",
        "Seja claro, direto e use uma linguagem acess√≠vel. Evite jarg√µes financeiros complexos.",
    ])

    try:
        response = model.generate_content(prompt_parts)
        return response.text
    except Exception as e:
        st.error(f"\n‚ùå Desculpe, ocorreu um erro ao tentar gerar o conselho: {e}")
        st.error(
            "Por favor, verifique sua conex√£o com a internet e a configura√ß√£o da API Key."
        )
        return "N√£o foi poss√≠vel gerar um conselho no momento. Tente novamente mais tarde."



def exibir_conselho(nome_usuario, conselho, contador_consultas):
    """Exibe o conselho gerado pela IA."""
    st.write("-" * 60)
    st.write(
        f"üí° {nome_usuario}, aqui est√° a orienta√ß√£o #{contador_consultas} do Mentor Financeiro AI:\n"
    )
    st.write(conselho)
    st.write("-" * 60)
    if contador_consultas == 1:
        st.write("\n‚ú® Este √© o seu primeiro insight! Continue buscando conhecimento e agindo!")
        st.write(
            "\n‚ú® Lembre-se, esse insight √© gerador por IA, que pode cometer erros! Sempre busque orienta√ß√£o profissional adequada!"
        )
    else:
        st.write(
            f"\n‚ú® Voc√™ j√° obteve {contador_consultas} insights! Continue sua jornada de aprendizado e a√ß√£o!"
        )
    st.write("Dica: pequenas a√ß√µes consistentes levam a grandes resultados.")



def salvar_progresso(nome_usuario, contador_consultas):
    """Salva o progresso do usu√°rio em um arquivo JSON."""
    dados = {"nome_usuario": nome_usuario, "contador_consultas": contador_consultas}
    try:
        with open(f"{nome_usuario}_progresso.json", "w") as arquivo:
            json.dump(dados, arquivo, indent=4)
    except Exception as e:
        st.error(f"Erro ao salvar o progresso: {e}")



def carregar_progresso():
    """Carrega o progresso do usu√°rio de um arquivo JSON."""
    try:
        # Tenta abrir o arquivo sem depender do nome do usu√°rio
        arquivos_progresso = [
            f
            for f in os.listdir()
            if f.endswith("_progresso.json")
        ]  # Lista arquivos

        if arquivos_progresso:
            # Se encontrar algum arquivo, pega o primeiro
            nome_arquivo = arquivos_progresso[0]
            with open(nome_arquivo, "r") as arquivo:
                dados = json.load(arquivo)
                if (
                    "nome_usuario" in dados and "contador_consultas" in dados
                ):  # Verifica se as chaves existem
                    nome_usuario = dados["nome_usuario"]
                    contador_consultas = dados["contador_consultas"]
                    st.write(f"Progresso carregado de: {nome_arquivo}")
                    return nome_usuario, contador_consultas
                else:
                    st.write(
                        "Arquivo de progresso corrompido. Iniciando novo progresso."
                    )  # Informa
                    return None, 0
        else:
            st.write("Nenhum progresso anterior encontrado. Iniciando novo progresso.")
            return None, 0  # Retorna None para o nome se n√£o achar
    except json.JSONDecodeError:
        st.write(
            "Erro ao decodificar o arquivo de progresso. Iniciando novo progresso."
        )  # Trata
        return None, 0
    except Exception as e:
        st.error(f"Erro ao carregar o progresso: {e}")
        return None, 0


def main():
    """Fun√ß√£o principal do programa."""
    exibir_mensagem_boas_vindas()
    nome_usuario_cache = None
    contador_consultas = 0

    # Carrega o progresso.
    nome_usuario_cache, contador_consultas = carregar_progresso()

    # Se n√£o conseguiu carregar o nome do usu√°rio, coleta do usu√°rio.
    if nome_usuario_cache is None:
        nome_usuario_cache, _, _, _, _ = coletar_dados_usuario()
    else:
        st.write(
            f"Ol√° novamente, {nome_usuario_cache}! Vamos continuar em busca de uma vida financeira mais saud√°vel e pr√≥spera!!")

    # Usar st.session_state para manter o estado entre as itera√ß√µes
    if 'contador_consultas' not in st.session_state:
        st.session_state.contador_consultas = contador_consultas
    if 'nome' not in st.session_state:
        st.session_state.nome = nome_usuario_cache
    nome_usuario = st.session_state.nome #garantir que nome_usuario est√° definido


    while True:
        # Passa nome_usuario_cache para coletar_dados_usuario em cada itera√ß√£o
        nome_usuario, preocupacao, renda_mensal, despesa_mensal, valor_divida = coletar_dados_usuario(nome_usuario_ja_coletado=nome_usuario)

        st.session_state.contador_consultas += 1
        conselho = gerar_conselho_financeiro_avancado(
            nome_usuario, preocupacao, renda_mensal, despesa_mensal, valor_divida
        )
        exibir_conselho(nome_usuario, conselho, st.session_state.contador_consultas)
        salvar_progresso(
            nome_usuario, st.session_state.contador_consultas
        )  # Salva o progresso do usu√°rio

        # --- Verifica√ß√£o de Conquistas ---
        if st.session_state.contador_consultas in conquistas:
            st.write("-" * 60)
            st.write(
                f"üèÜ Parab√©ns, {nome_usuario}! Voc√™ desbloqueou a conquista: {conquistas[st.session_state.contador_consultas]} üèÜ"
            )
            st.write("-" * 60)

        time.sleep(1)
        continuar = st.radio(
            "\nDeseja fazer outra consulta ou registrar outra preocupa√ß√£o?",
            ["Sim", "N√£o"], key="continuar"
        )
        if continuar == "N√£o":
            st.write(
                f"\nObrigado por usar o Mentor Financeiro AI, {nome_usuario}! Volte sempre que precisar de um norte! üöÄ"
            )
            st.write("Boa sorte no seu desafio da Alura! Voc√™ est√° no caminho certo!")
            break
        st.write("\nOk! Vamos para a pr√≥xima consulta...")
        time.sleep(1)


if __name__ == "__main__":
    main()
