# Mentor Financeiro AI
# Aplica√ß√£o de assist√™ncia financeira com interface Streamlit e recursos de gamifica√ß√£o
# Desenvolvido para fins educacionais

# Importa√ß√£o das bibliotecas necess√°rias
import streamlit as st  # Biblioteca para cria√ß√£o de interface web
import google.generativeai as genai  # API do Google Generative AI (Gemini)
import os  # Para manipula√ß√£o de vari√°veis de ambiente
import time  # Para pausas e simula√ß√£o de processamento
import pandas as pd  # Para manipula√ß√£o de dados
import matplotlib.pyplot as plt  # Para visualiza√ß√£o de dados
import numpy as np  # Para opera√ß√µes num√©ricas
import random  # Para gera√ß√£o de desafios aleat√≥rios
from datetime import datetime, timedelta  # Para manipula√ß√£o de datas

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="Mentor Financeiro AI",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para aplicar estilo CSS personalizado
def aplicar_estilo():
    """
    Aplica estilos CSS personalizados √† interface Streamlit.
    Isso melhora a apar√™ncia visual e a experi√™ncia do usu√°rio.
    """
    st.markdown("""
    <style>
        /* Estilo geral */
        .main {
            background-color: #f0f2f6; /* Cor de fundo mais suave */
            padding: 20px;
            font-family: 'Roboto', sans-serif; /* Fonte mais moderna */
        }
        
        /* Estilo para cabe√ßalhos */
        h1, h2, h3 {
            color: #5c1691; /* Roxo principal para t√≠tulos */
        }
        
        /* Estilo para caixas de informa√ß√£o */
        .info-box {
            background-color: #e8eaf6; /* Azul claro para info */
            border-left: 5px solid #5c1691; /* Roxo */
            padding: 20px;
            border-radius: 8px; /* Bordas mais arredondadas */
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        /* Estilo para caixas de sucesso */
        .success-box {
            background-color: #e8f5e9; /* Verde claro para sucesso */
            border-left: 5px solid #4caf50; /* Verde */
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        /* Estilo para caixas de alerta */
        .warning-box {
            background-color: #fff3e0; /* Laranja claro para alerta */
            border-left: 5px solid #ff9800; /* Laranja */
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        /* Estilo para barras de progresso */
        .stProgress > div > div {
            background-color: #5c1691; /* Roxo */
        }
        
        /* Estilo para bot√µes */
        .stButton button {
            background-color: #5c1691; /* Roxo */
            color: white;
            border-radius: 20px; /* Bot√µes mais arredondados (p√≠lula) */
            border: none;
            padding: 10px 25px; /* Mais padding */
            font-weight: bold;
            transition: background-color 0.3s ease; /* Transi√ß√£o suave */
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .stButton button:hover {
            background-color: #4a148c; /* Roxo mais escuro no hover */
        }

        /* Estilo para bot√µes secund√°rios (ex: abandonar desafio) */
        .stButton button[kind="secondary"] {
            background-color: #e0e0e0; /* Cinza claro */
            color: #333333; /* Texto escuro */
        }
        .stButton button[kind="secondary"]:hover {
            background-color: #bdbdbd; /* Cinza mais escuro no hover */
        }
        
        /* Estilo para cart√µes de desafio */
        .challenge-card {
            background-color: #ffffff; /* Fundo branco para cards */
            border: 1px solid #e0e0e0; /* Borda sutil */
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Sombra mais pronunciada */
        }
        
        /* Estilo para medalhas e conquistas */
        .badge {
            display: inline-block;
            background-color: #c97ffa; /* Lil√°s para badges */
            color: white;
            border-radius: 20px;
            padding: 5px 15px;
            margin-right: 10px;
            font-weight: bold;
            font-size: 0.9em;
        }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    """, unsafe_allow_html=True)

# Aplicar estilo personalizado
aplicar_estilo()

# --- Configura√ß√£o da API Key do Google Generative AI ---
def configurar_api_key():
    if 'api_key_configurada' in st.session_state and st.session_state.api_key_configurada:
        return True
    
    api_key = os.environ.get("GOOGLE_API_KEY")
    
    if not api_key:
        st.sidebar.markdown("### Configura√ß√£o da API Key")
        api_key = st.sidebar.text_input(
            "Insira sua Google API Key:",
            type="password",
            help="Obtenha sua chave em https://aistudio.google.com/app/apikey"
        )
        
        if not api_key:
            st.sidebar.warning("‚ö†Ô∏è API Key n√£o fornecida. Algumas funcionalidades estar√£o limitadas.")
            return False
    
    try:
        genai.configure(api_key=api_key)
        st.session_state.api_key_configurada = True
        return True
    except Exception as e:
        st.sidebar.error(f"‚ùå Erro ao configurar a API Key: {e}")
        st.session_state.api_key_configurada = False
        return False

# --- Configura√ß√£o do Modelo Generativo ---
def configurar_modelo_gemini():
    if not configurar_api_key():
        return None
    
    generation_config = {
        "temperature": 0.75,
        "top_p": 1,
        "top_k": 1,
        "max_output_tokens": 8000,
    }
    
    safety_settings = [
        {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    ]
    
    try:
        model = genai.GenerativeModel(
            model_name="gemini-1.5-flash", # Modelo atualizado
            generation_config=generation_config,
            safety_settings=safety_settings
        )
        return model
    except Exception as e:
        st.error(f"‚ùå Erro ao inicializar o modelo Gemini: {e}")
        return None

# --- Inicializa√ß√£o da Sess√£o ---
def inicializar_sessao():
    if 'nome_usuario' not in st.session_state:
        st.session_state.nome_usuario = ""
    
    if 'dados_financeiros' not in st.session_state:
        st.session_state.dados_financeiros = {
            'renda_mensal': None,
            'despesas_fixas': {},
            'despesas_variaveis': {},
            'dividas': {},
            'metas': {}
        }
    
    if 'pontos' not in st.session_state:
        st.session_state.pontos = 0
    
    if 'nivel' not in st.session_state:
        st.session_state.nivel = 1
    
    if 'conquistas' not in st.session_state:
        st.session_state.conquistas = []
    
    if 'desafios_ativos' not in st.session_state:
        st.session_state.desafios_ativos = []
    
    if 'desafios_concluidos' not in st.session_state:
        st.session_state.desafios_concluidos = []

    # NOVA VARI√ÅVEL DE SESS√ÉO para o desafio proposto mas ainda n√£o aceito
    if 'desafio_proposto' not in st.session_state:
        st.session_state.desafio_proposto = None
            
    if 'pagina_atual' not in st.session_state:
        st.session_state.pagina_atual = "boas_vindas"
    
    if 'historico_consultas' not in st.session_state:
        st.session_state.historico_consultas = []
    
    if 'diagnostico_realizado' not in st.session_state:
        st.session_state.diagnostico_realizado = False

# --- Fun√ß√µes de Gamifica√ß√£o ---
def adicionar_pontos(quantidade, motivo=""):
    st.session_state.pontos += quantidade
    nivel_anterior = st.session_state.nivel
    st.session_state.nivel = 1 + (st.session_state.pontos // 100)
    
    if st.session_state.nivel > nivel_anterior:
        adicionar_conquista(f"N√≠vel {st.session_state.nivel} Alcan√ßado! üèÜ")
        st.balloons()
    
    if motivo:
        st.success(f"üéâ +{quantidade} pontos: {motivo}")

def adicionar_conquista(conquista):
    if conquista not in st.session_state.conquistas:
        st.session_state.conquistas.append(conquista)
        st.success(f"üèÜ Nova conquista desbloqueada: {conquista}")

def gerar_desafio_aleatorio():
    desafios = [
        {
            "titulo": "Semana Sem Delivery",
            "descricao": "Evite pedir comida por delivery por uma semana inteira.",
            "dificuldade": "M√©dio",
            "pontos": 30,
            "duracao_dias": 7
        },
        {
            "titulo": "Dia de Registro Total",
            "descricao": "Registre absolutamente todos os seus gastos por um dia inteiro, at√© os centavos.",
            "dificuldade": "F√°cil",
            "pontos": 15,
            "duracao_dias": 1
        },
        {
            "titulo": "Economia de R$50",
            "descricao": "Encontre formas de economizar R$50 esta semana em gastos que voc√™ normalmente faria.",
            "dificuldade": "M√©dio",
            "pontos": 25,
            "duracao_dias": 7
        },
        {
            "titulo": "Pesquisa de Pre√ßos Essenciais",
            "descricao": "Compare pre√ßos de 3 itens essenciais da sua lista de compras em 3 lugares diferentes antes de comprar.",
            "dificuldade": "F√°cil",
            "pontos": 20,
            "duracao_dias": 3
        },
        {
            "titulo": "Dia Sem Gastos Sup√©rfluos",
            "descricao": "Passe um dia inteiro sem realizar nenhum gasto que n√£o seja absolutamente essencial (alimenta√ß√£o b√°sica, transporte obrigat√≥rio).",
            "dificuldade": "Dif√≠cil",
            "pontos": 40,
            "duracao_dias": 1
        },
        {
            "titulo": "Revis√£o de Assinaturas",
            "descricao": "Revise todas as suas assinaturas mensais (streaming, apps, etc.) e cancele pelo menos uma que n√£o usa com frequ√™ncia.",
            "dificuldade": "M√©dio",
            "pontos": 35,
            "duracao_dias": 2
        }
    ]
    
    desafio = random.choice(desafios)
    data_inicio = datetime.now()
    data_fim = data_inicio + timedelta(days=desafio["duracao_dias"])
    
    desafio["data_inicio"] = data_inicio
    desafio["data_fim"] = data_fim
    desafio["concluido"] = False
    
    return desafio

def aceitar_desafio(desafio):
    titulos_ativos = [d["titulo"] for d in st.session_state.desafios_ativos]
    if desafio["titulo"] not in titulos_ativos:
        st.session_state.desafios_ativos.append(desafio)
        st.success(f"üéØ Desafio aceito: {desafio['titulo']}")
        adicionar_pontos(5, "Aceitou um novo desafio")

def concluir_desafio(indice):
    if 0 <= indice < len(st.session_state.desafios_ativos):
        desafio = st.session_state.desafios_ativos[indice]
        desafio["concluido"] = True
        
        st.session_state.desafios_concluidos.append(desafio)
        st.session_state.desafios_ativos.pop(indice)
        
        adicionar_pontos(desafio["pontos"], f"Concluiu o desafio: {desafio['titulo']}")
        
        if len(st.session_state.desafios_concluidos) == 1:
            adicionar_conquista("Primeiro Desafio Conclu√≠do! üåü")
        elif len(st.session_state.desafios_concluidos) == 5:
            adicionar_conquista("Desafiador Experiente: 5 Desafios Conclu√≠dos! üî•")
        elif len(st.session_state.desafios_concluidos) == 10:
            adicionar_conquista("Mestre dos Desafios: 10 Desafios Conclu√≠dos! üèÖ")

# --- Fun√ß√µes de Diagn√≥stico Financeiro (sem altera√ß√µes) ---
def calcular_saude_financeira():
    dados = st.session_state.dados_financeiros
    resultado = {
        "comprometimento_renda": 0, "endividamento": 0, "reserva_emergencia": 0,
        "score": 0, "classificacao": "N√£o dispon√≠vel"
    }
    if not dados["renda_mensal"]: return resultado
    total_despesas_fixas = sum(dados["despesas_fixas"].values()) if dados["despesas_fixas"] else 0
    total_despesas_variaveis = sum(dados["despesas_variaveis"].values()) if dados["despesas_variaveis"] else 0
    total_parcelas_dividas = sum(d.get("parcela_mensal", 0) for d in dados["dividas"].values() if d.get("parcela_mensal"))
    total_despesas = total_despesas_fixas + total_despesas_variaveis + total_parcelas_dividas
    if dados["renda_mensal"] > 0:
        resultado["comprometimento_renda"] = (total_despesas / dados["renda_mensal"]) * 100
    total_dividas = sum(d.get("valor_total", 0) for d in dados["dividas"].values())
    if dados["renda_mensal"] > 0:
        resultado["endividamento"] = (total_dividas / (dados["renda_mensal"] * 12)) * 100 if dados["renda_mensal"] * 12 > 0 else float('inf')
    reserva = dados.get("reserva_emergencia", 0)
    if total_despesas > 0:
        resultado["reserva_emergencia"] = reserva / total_despesas if reserva else 0
    score = 100
    if resultado["comprometimento_renda"] > 80: score -= 40
    elif resultado["comprometimento_renda"] > 60: score -= 25
    elif resultado["comprometimento_renda"] > 40: score -= 10
    if resultado["endividamento"] > 50: score -= 30
    elif resultado["endividamento"] > 30: score -= 20
    elif resultado["endividamento"] > 15: score -= 10
    if resultado["reserva_emergencia"] >= 6: score += 20
    elif resultado["reserva_emergencia"] >= 3: score += 10
    elif resultado["reserva_emergencia"] < 1: score -= 20
    resultado["score"] = max(0, min(100, score))
    if resultado["score"] >= 80: resultado["classificacao"] = "Excelente"
    elif resultado["score"] >= 60: resultado["classificacao"] = "Boa"
    elif resultado["score"] >= 40: resultado["classificacao"] = "Regular"
    elif resultado["score"] >= 20: resultado["classificacao"] = "Preocupante"
    else: resultado["classificacao"] = "Cr√≠tica"
    return resultado

def gerar_grafico_despesas():
    dados = st.session_state.dados_financeiros
    todas_despesas = {}
    for categoria, valor in dados["despesas_fixas"].items(): todas_despesas[f"Fixo: {categoria}"] = valor
    for categoria, valor in dados["despesas_variaveis"].items(): todas_despesas[f"Vari√°vel: {categoria}"] = valor
    for nome_divida, info_divida in dados["dividas"].items():
        if "parcela_mensal" in info_divida and info_divida["parcela_mensal"]:
            todas_despesas[f"D√≠vida: {nome_divida}"] = info_divida["parcela_mensal"]
    if not todas_despesas: return None
    fig, ax = plt.subplots(figsize=(10, 6))
    despesas_ordenadas = dict(sorted(todas_despesas.items(), key=lambda x: x[1], reverse=True))
    cores = plt.cm.viridis(np.linspace(0, 1, len(despesas_ordenadas))) # Paleta de cores diferente
    wedges, texts, autotexts = ax.pie(
        despesas_ordenadas.values(), labels=None, autopct='%1.1f%%',
        startangle=90, colors=cores, wedgeprops=dict(width=0.4, edgecolor='w')) # Donut chart
    for autotext in autotexts:
        autotext.set_color('black'); autotext.set_fontsize(9); autotext.set_fontweight('bold')
    ax.legend(wedges, despesas_ordenadas.keys(), title="Categorias", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1), fontsize='small')
    ax.set_title("Distribui√ß√£o de Despesas Mensais", fontsize=16, pad=20, color="#5c1691")
    plt.tight_layout()
    return fig

def calcular_tempo_quitacao_dividas():
    dados = st.session_state.dados_financeiros
    resultado = {"dividas": {}, "tempo_total_meses": 0, "valor_total": 0, "juros_total": 0}
    if not dados["dividas"]: return resultado
    tempo_maximo = 0
    for nome, divida in dados["dividas"].items():
        if "valor_total" in divida and "parcela_mensal" in divida and divida["parcela_mensal"] > 0:
            valor_total = divida["valor_total"]; parcela_mensal = divida["parcela_mensal"]
            taxa_juros_mensal = divida.get("taxa_juros_mensal", 0) / 100 if "taxa_juros_mensal" in divida else 0
            saldo_devedor = valor_total; meses = 0; total_pago = 0; total_juros = 0
            while saldo_devedor > 0.01 and meses < 600: # Limite e condi√ß√£o de parada
                meses += 1; juros_mes = saldo_devedor * taxa_juros_mensal; total_juros += juros_mes
                amortizacao = parcela_mensal - juros_mes
                if amortizacao <= 0: meses = float('inf'); break # Parcela n√£o cobre juros
                pagamento_efetivo = min(parcela_mensal, saldo_devedor + juros_mes)
                total_pago += pagamento_efetivo
                saldo_devedor += juros_mes - pagamento_efetivo
            resultado["dividas"][nome] = {"tempo_meses": meses, "total_pago": total_pago, "total_juros": total_juros}
            resultado["valor_total"] += valor_total; resultado["juros_total"] += total_juros
            if meses != float('inf'): tempo_maximo = max(tempo_maximo, meses)
            else: tempo_maximo = float('inf') # Se uma d√≠vida √© infinita, o total √© infinito
    resultado["tempo_total_meses"] = tempo_maximo
    return resultado

def sugerir_metodo_quitacao():
    dados = st.session_state.dados_financeiros
    if not dados["dividas"]: return {"metodo": "Nenhum", "explicacao": "N√£o h√° d√≠vidas cadastradas."}
    total_dividas_valor = sum(d.get("valor_total", 0) for d in dados["dividas"].values())
    dividas_com_juros_altos = sum(1 for d in dados["dividas"].values() if d.get("taxa_juros_mensal", 0) > 3) # Juros > 3% a.m.
    quantidade_dividas = len(dados["dividas"])
    perfil_motivacional = "conquistas_rapidas"
    if dividas_com_juros_altos > 0 and (dividas_com_juros_altos >= quantidade_dividas / 2 or total_dividas_valor > 5000):
        metodo = "Avalanche (Foco nos Juros Altos)"
        explicacao = "Priorize a d√≠vida com a MAIOR taxa de juros. Isso economiza mais dinheiro a longo prazo, especialmente com juros altos envolvidos."
    elif perfil_motivacional == "conquistas_rapidas" and quantidade_dividas > 1:
        metodo = "Bola de Neve (Foco na Menor D√≠vida)"
        explicacao = "Priorize a d√≠vida com o MENOR saldo devedor. Quitar d√≠vidas rapidamente pode aumentar sua motiva√ß√£o para continuar."
    else:
        metodo = "Personalizado/H√≠brido"
        explicacao = "Analise suas d√≠vidas. Se tiver uma pequena f√°cil de quitar, comece por ela para ganhar √¢nimo (Bola de Neve). Depois, ataque as com juros mais altos (Avalanche)."
    return {"metodo": metodo, "explicacao": explicacao}

# --- Fun√ß√µes de Conte√∫do Educacional (sem altera√ß√µes) ---
def obter_explicacao_termo_financeiro(termo):
    modelo = configurar_modelo_gemini()
    if not modelo: return "N√£o foi poss√≠vel obter a explica√ß√£o. Verifique a API Key."
    try:
        prompt = [f"Explique o termo financeiro '{termo}' de forma simples e did√°tica para um leigo em finan√ßas. Use no m√°ximo 2 par√°grafos e um exemplo pr√°tico. Responda em portugu√™s do Brasil."]
        response = modelo.generate_content(prompt)
        return response.text
    except Exception as e: return f"Erro ao obter explica√ß√£o: {e}"

def gerar_dica_financeira_personalizada():
    modelo = configurar_modelo_gemini()
    if not modelo: return "N√£o foi poss√≠vel gerar uma dica. Verifique a API Key."
    dados = st.session_state.dados_financeiros; saude = calcular_saude_financeira()
    try:
        prompt_parts = [
            f"Gere uma dica financeira personalizada e acion√°vel (m√°ximo 2 frases) para algu√©m com:",
            f"- Comprometimento de renda: {saude['comprometimento_renda']:.1f}%",
            f"- N√≠vel de endividamento: {saude['endividamento']:.1f}% ({saude['classificacao']})",
        ]
        if dados["dividas"]: prompt_parts.append(f"- D√≠vidas: {', '.join(dados['dividas'].keys())}")
        else: prompt_parts.append("- Sem d√≠vidas ativas.")
        if saude["reserva_emergencia"] > 0: prompt_parts.append(f"- Reserva para {saude['reserva_emergencia']:.1f} meses.")
        else: prompt_parts.append("- Sem reserva de emerg√™ncia.")
        prompt_parts.append("A dica deve ser motivadora. Responda em portugu√™s do Brasil.")
        response = modelo.generate_content(prompt_parts)
        return response.text
    except Exception as e: return f"Erro ao gerar dica: {e}"

def gerar_planejamento_financeiro(preocupacao):
    modelo = configurar_modelo_gemini()
    if not modelo: return "N√£o foi poss√≠vel gerar um planejamento. Verifique a API Key."
    dados = st.session_state.dados_financeiros; nome = st.session_state.nome_usuario
    try:
        prompt_parts = [
            f"Sou {nome}. Minha principal preocupa√ß√£o financeira √©: '{preocupacao}'.",
            f"Minha renda mensal: R${dados['renda_mensal']:.2f}." if dados['renda_mensal'] else "Renda mensal n√£o informada.",
        ]
        if dados['dividas']:
            prompt_parts.append("Minhas d√≠vidas:")
            for nome_divida, info in dados['dividas'].items():
                prompt_parts.append(f"- {nome_divida}: R${info.get('valor_total',0):.2f}, parcela R${info.get('parcela_mensal',0):.2f}, juros {info.get('taxa_juros_mensal',0):.1f}% a.m.")
        prompt_parts.extend([
            "\nVoc√™ √© um consultor financeiro experiente, emp√°tico e motivador.",
            "Preciso de um plano de a√ß√£o detalhado e pr√°tico para lidar com essa situa√ß√£o, em portugu√™s do Brasil:",
            "1. Mensagem curta de encorajamento (1-2 frases).",
            "2. An√°lise breve da situa√ß√£o com base nos dados fornecidos.",
            "3. Plano de A√ß√£o Passo-a-Passo (numerado), com sugest√µes concretas, incluindo valores se poss√≠vel (ex: economizar X, direcionar Y para d√≠vida Z).",
            "4. Se a renda for insuficiente, sugira 1-2 ideias realistas de renda extra adequadas ao contexto brasileiro.",
            "5. Dica final motivadora (1 frase).",
            "Seja claro, direto, use linguagem acess√≠vel. Formate com Markdown (negrito, listas)."
        ])
        response = modelo.generate_content(prompt_parts)
        st.session_state.historico_consultas.append({"data": datetime.now(), "preocupacao": preocupacao, "planejamento": response.text})
        adicionar_pontos(10, "Solicitou um planejamento financeiro")
        return response.text
    except Exception as e: return f"Erro ao gerar planejamento: {e}"

def simular_negociacao_divida(credor, valor_divida, dias_atraso):
    modelo = configurar_modelo_gemini()
    if not modelo: return "N√£o foi poss√≠vel simular. Verifique a API Key."
    nome = st.session_state.nome_usuario
    try:
        prompt_parts = [
            f"Simule um di√°logo de negocia√ß√£o de d√≠vida entre {nome} (cliente) e um atendente do(a) {credor}.",
            f"Valor original da d√≠vida: R${valor_divida:.2f}, Atraso: {dias_atraso} dias.",
            "\nO di√°logo deve ser realista e incluir:",
            "1. Sauda√ß√£o do atendente e verifica√ß√£o de dados.",
            f"2. {nome} explicando a situa√ß√£o e o desejo de negociar.",
            "3. Atendente apresentando op√ß√µes (com juros/multas, se aplic√°vel).",
            f"4. {nome} argumentando por melhores condi√ß√µes (desconto, parcelamento sem juros abusivos).",
            "5. Atendente fazendo uma contraproposta.",
            "6. Fechamento do acordo ou pr√≥ximos passos.",
            "Inclua dicas entre par√™nteses para {nome} (ex: (Mantenha a calma), (Pe√ßa o CET)).",
            "Formate como um di√°logo. Responda em portugu√™s do Brasil."
        ]
        response = modelo.generate_content(prompt_parts)
        adicionar_pontos(15, "Realizou uma simula√ß√£o de negocia√ß√£o")
        return response.text
    except Exception as e: return f"Erro ao simular negocia√ß√£o: {e}"

# --- Componentes da Interface (sem grandes altera√ß√µes, exceto talvez chaves de bot√µes se necess√°rio) ---
def exibir_cabecalho():
    col1, col2 = st.columns([3, 1])
    with col1:
        st.markdown("<h1 style='color: #5c1691; font-weight: 700;'>üåü Mentor Financeiro AI</h1>", unsafe_allow_html=True)
        st.markdown("#### Seu assistente para trilhar o caminho da sa√∫de financeira!")
    with col2:
        if st.session_state.nome_usuario:
            st.markdown(f"<p style='text-align: right; margin-bottom: 0px;'>Ol√°, <strong>{st.session_state.nome_usuario}</strong>!</p>", unsafe_allow_html=True)
            st.markdown(f"<p style='text-align: right; margin-bottom: 15px;'>N√≠vel: {st.session_state.nivel} | Pontos: {st.session_state.pontos}</p>", unsafe_allow_html=True)
            medalha_html = ""
            if st.session_state.nivel >= 5: medalha_html = "<div class='badge' style='background-color: #ffd700; color: #333; float: right;'>üèÜ Especialista</div>"
            elif st.session_state.nivel >= 3: medalha_html = "<div class='badge' style='background-color: #c0c0c0; float: right;'>ü•à Estrategista</div>"
            elif st.session_state.nivel >= 1: medalha_html = "<div class='badge' style='background-color: #cd7f32; float: right;'>ü•â Aprendiz</div>"
            if medalha_html: st.markdown(medalha_html, unsafe_allow_html=True)

def exibir_barra_lateral():
    st.sidebar.title("Menu")
    if st.session_state.nome_usuario:
        botoes_menu = {
            "dashboard": "üìä Dashboard", "consultor": "üí¨ Consultor Virtual",
            "diagnostico": "üìù Diagn√≥stico", "desafios": "üéØ Desafios",
            "educacional": "üìö Conte√∫do", "conquistas": "üèÜ Conquistas"
        }
        for pagina_id, nome_botao in botoes_menu.items():
            if st.sidebar.button(nome_botao, use_container_width=True, key=f"btn_nav_{pagina_id}"):
                st.session_state.pagina_atual = pagina_id
                st.session_state.desafio_proposto = None # Limpa desafio proposto ao navegar
                st.rerun() # Garante que a p√°gina correta seja exibida
        
        st.sidebar.markdown("---")
        st.sidebar.markdown("### Seu Progresso")
        progresso_nivel = (st.session_state.pontos % 100) / 100
        st.sidebar.progress(progresso_nivel, text=f"N√≠vel {st.session_state.nivel}: {st.session_state.pontos % 100}/100 pts")
        if st.session_state.conquistas:
            st.sidebar.markdown("#### Conquistas Recentes")
            for conquista in reversed(st.session_state.conquistas[-2:]): # Mostrar as 2 √∫ltimas
                st.sidebar.markdown(f"<span class='badge'>{conquista}</span>", unsafe_allow_html=True)
    
    st.sidebar.markdown("---")
    st.sidebar.markdown("### Configura√ß√µes")
    if 'api_key_configurada' in st.session_state and st.session_state.api_key_configurada:
        st.sidebar.success("‚úÖ API Gemini configurada")
    else:
        st.sidebar.warning("‚ö†Ô∏è API Gemini n√£o configurada")
        configurar_api_key() # Tenta configurar se n√£o estiver
    
    st.sidebar.markdown("---")
    st.sidebar.info("Mentor Financeiro AI\n\nDesenvolvido para fins educacionais. Conte√∫do de IA pode conter erros. Procure ajuda profissional.")

# --- P√°ginas da Aplica√ß√£o ---
def pagina_boas_vindas():
    st.markdown("## üëã Bem-vindo ao Mentor Financeiro AI!")
    st.markdown("""
    <div class="info-box">
        <h3>O que √© o Mentor Financeiro AI?</h3>
        <p>Sou um assistente inteligente para ajudar voc√™ a melhorar sua sa√∫de financeira com planejamentos, diagn√≥sticos e desafios gamificados.</p>
        <p>Minha miss√£o √© auxiliar no primeiro passo rumo a uma vida financeira mais leve e tranquila, especialmente para quem enfrenta endividamento.</p>        
    </div>
    """, unsafe_allow_html=True)
    nome = st.text_input("Para come√ßarmos, qual √© o seu nome?", key="input_nome_boas_vindas", value=st.session_state.get("nome_usuario", ""))
    if st.button("üöÄ Come√ßar Jornada", key="btn_comecar_jornada"):
        if nome:
            st.session_state.nome_usuario = nome
            st.session_state.pagina_atual = "dashboard"
            if "In√≠cio da Jornada Financeira! üöÄ" not in st.session_state.conquistas:
                 adicionar_conquista("In√≠cio da Jornada Financeira! üöÄ")
                 adicionar_pontos(10, "Iniciou sua jornada financeira")
            st.success(f"Ol√°, {nome}! Bem-vindo √† sua jornada financeira!")
            st.balloons()
            time.sleep(1) # Pequena pausa para o usu√°rio ver a mensagem
            st.rerun()
        else:
            st.error("Por favor, informe seu nome para continuar.")
    st.markdown("### Recursos dispon√≠veis:")
    col1, col2 = st.columns(2)
    with col1: st.markdown("- **Consultor Virtual Inteligente**\n- **Diagn√≥stico Financeiro Completo**\n- **Planos de A√ß√£o Personalizados**")
    with col2: st.markdown("- **Desafios Financeiros Gamificados**\n- **Conte√∫do Educacional Pr√°tico**\n- **Sistema de Pontos e Conquistas**")

def pagina_dashboard():
    st.markdown("## üìä Dashboard")
    if not st.session_state.dados_financeiros.get("renda_mensal"): # Usar .get para evitar KeyError
        st.warning("Voc√™ ainda n√£o completou seu diagn√≥stico financeiro. Complete-o para visualizar seu dashboard completo.")
        if st.button("Ir para Diagn√≥stico Financeiro", key="btn_goto_diag_dash"):
            st.session_state.pagina_atual = "diagnostico"
            st.rerun()
        st.markdown("### Dica do Dia")
        st.info("üí° **Comece anotando todos os seus gastos!** O primeiro passo para melhorar sua sa√∫de financeira √© entender para onde seu dinheiro est√° indo. Anote tudo por uma semana.")
        return

    saude = calcular_saude_financeira()
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric(label="Comprometimento de Renda", value=f"{saude['comprometimento_renda']:.1f}%", 
                  help="Ideal abaixo de 60-70%. Percentual da sua renda usado para pagar todas as despesas e d√≠vidas.")
        if saude['comprometimento_renda'] > 80: st.error("‚ö†Ô∏è Acima do recomendado (80%)")
        elif saude['comprometimento_renda'] > 60: st.warning("‚ö†Ô∏è Aten√ß√£o! Pr√≥ximo do limite")
        else: st.success("‚úÖ Dentro do recomendado")
    with col2:
        st.metric(label="N√≠vel de Endividamento Total", value=f"{saude['endividamento']:.1f}%",
                  help="Ideal abaixo de 30-40% do seu patrim√¥nio ou renda anual. Rela√ß√£o entre o total de suas d√≠vidas e sua renda anual.")
        if saude['endividamento'] > 50: st.error("‚ö†Ô∏è Endividamento elevado")
        elif saude['endividamento'] > 30: st.warning("‚ö†Ô∏è Endividamento moderado")
        else: st.success("‚úÖ Endividamento controlado")
    with col3:
        st.metric(label="Score de Sa√∫de Financeira", value=f"{saude['score']}/100", delta=f"{saude['classificacao']}")
        if saude['score'] >= 80: st.success(f"Classifica√ß√£o: {saude['classificacao']}")
        elif saude['score'] >= 40: st.warning(f"Classifica√ß√£o: {saude['classificacao']}")
        else: st.error(f"Classifica√ß√£o: {saude['classificacao']}")

    st.markdown("### Distribui√ß√£o de Despesas")
    grafico = gerar_grafico_despesas()
    if grafico: st.pyplot(grafico)
    else: st.info("Adicione suas despesas no diagn√≥stico para visualizar o gr√°fico.")

    st.markdown("### Situa√ß√£o das D√≠vidas")
    if st.session_state.dados_financeiros["dividas"]:
        info_dividas = calcular_tempo_quitacao_dividas()
        if info_dividas["tempo_total_meses"] == float('inf'):
            st.error("‚ö†Ô∏è Com as parcelas atuais, algumas d√≠vidas podem levar muito tempo ou nunca serem quitadas (parcelas menores que os juros). Revise os valores!")
        elif info_dividas["tempo_total_meses"] > 0:
            meses, anos = info_dividas["tempo_total_meses"], info_dividas["tempo_total_meses"] // 12
            st.info(f"‚è±Ô∏è Tempo estimado para quitar todas as d√≠vidas: {int(anos)} anos e {int(meses % 12)} meses.")
        else:
             st.success("‚úÖ Parece que n√£o h√° d√≠vidas com tempo de quita√ß√£o calculado ou todas j√° foram quitadas!")

        metodo = sugerir_metodo_quitacao()
        st.markdown(f"**M√©todo de quita√ß√£o recomendado:** {metodo['metodo']}")
        st.markdown(f"*{metodo['explicacao']}*")
        
        dados_tabela_div = []
        for nome, info in info_dividas["dividas"].items():
            div_orig = st.session_state.dados_financeiros["dividas"][nome]
            tempo_str = f"{int(info['tempo_meses'] // 12)}a {int(info['tempo_meses'] % 12)}m" if info['tempo_meses'] != float('inf') and info['tempo_meses'] > 0 else ("Nunca" if info['tempo_meses'] == float('inf') else "N/A")
            dados_tabela_div.append({
                "D√≠vida": nome, "Valor Total": f"R$ {div_orig.get('valor_total',0):.2f}", 
                "Parcela": f"R$ {div_orig.get('parcela_mensal',0):.2f}", "Juros (% a.m.)": f"{div_orig.get('taxa_juros_mensal',0):.2f}",
                "Tempo p/ Quitar": tempo_str, "Total de Juros Pago": f"R$ {info.get('total_juros',0):.2f}"
            })
        if dados_tabela_div: st.dataframe(pd.DataFrame(dados_tabela_div), hide_index=True, use_container_width=True)
    else:
        st.success("‚úÖ Voc√™ n√£o possui d√≠vidas cadastradas.")

    st.markdown("### Dica Personalizada do Mentor AI")
    with st.spinner("Gerando sua dica personalizada..."):
        dica = gerar_dica_financeira_personalizada()
    st.markdown(f"<div class='info-box' style='background-color: #fff9c4; border-left-color: #fbc02d;'>üí° <strong>{dica}</strong></div>", unsafe_allow_html=True)

    if st.session_state.desafios_ativos:
        st.markdown("### Seus Desafios Ativos")
        for desafio in st.session_state.desafios_ativos:
            dias_restantes = (desafio["data_fim"] - datetime.now()).days
            st.markdown(f"""
            <div class="challenge-card" style='border-left: 5px solid #5c1691;'>
                <h4>{desafio['titulo']}</h4> <p>{desafio['descricao']}</p>
                <p><strong>Dificuldade:</strong> {desafio['dificuldade']} | <strong>Pontos:</strong> {desafio['pontos']} | <strong>Restam:</strong> {max(0, dias_restantes)} dias</p>
            </div>""", unsafe_allow_html=True)

def pagina_consultor():
    st.markdown("## üí¨ Consultor Virtual Inteligente")
    st.markdown("<div class='info-box'><p>Use a intelig√™ncia artificial para obter planejamentos, simular negocia√ß√µes e entender termos financeiros.</p></div>", unsafe_allow_html=True)
    
    tab1, tab2, tab3 = st.tabs(["üéØ Planejamento Financeiro", "üó£Ô∏è Simulador de Negocia√ß√£o", "üìñ Gloss√°rio Financeiro"])
    
    with tab1:
        st.markdown("### Planejamento Financeiro Personalizado")
        preocupacao = st.text_area("Qual sua principal preocupa√ß√£o ou objetivo financeiro no momento?", 
                                   placeholder="Ex: Quitar o cart√£o de cr√©dito de R$2000; Economizar para uma viagem; Organizar minhas finan√ßas.", height=100, key="text_area_preocupacao")
        if st.button("üí° Obter Planejamento", key="btn_obter_planejamento"):
            if preocupacao:
                if not st.session_state.dados_financeiros.get("renda_mensal"):
                    st.warning("Para um planejamento mais preciso, preencha seus dados na se√ß√£o 'Diagn√≥stico Financeiro' primeiro.")
                with st.spinner("Gerando seu planejamento personalizado... Isso pode levar um momento."):
                    planejamento = gerar_planejamento_financeiro(preocupacao)
                st.markdown(f"<div class='success-box'>{planejamento}</div>", unsafe_allow_html=True)
            else: st.error("Por favor, descreva sua preocupa√ß√£o ou objetivo.")
        if st.session_state.historico_consultas:
            st.markdown("--- \n### Hist√≥rico de Planejamentos")
            for i, consulta in enumerate(reversed(st.session_state.historico_consultas[-3:])): # Mostrar os 3 √∫ltimos
                with st.expander(f"Planejamento de {consulta['data'].strftime('%d/%m/%Y %H:%M')} - Foco: {consulta['preocupacao'][:30]}..."):
                    st.markdown(consulta['planejamento'])
    with tab2:
        st.markdown("### Simulador de Negocia√ß√£o de D√≠vidas")
        st.markdown("Prepare-se para conversas reais com credores simulando uma negocia√ß√£o aqui.")
        col1, col2, col3 = st.columns([2,1,1])
        with col1: credor = st.text_input("Nome do Credor", placeholder="Ex: Banco XYZ, Loja ABC", key="input_credor_sim")
        with col2: valor_divida = st.number_input("Valor da D√≠vida (R$)", min_value=0.0, step=100.0, key="num_valor_div_sim")
        with col3: dias_atraso = st.number_input("Dias de Atraso", min_value=0, step=1, key="num_dias_atraso_sim")
        if st.button("ü§ù Simular Negocia√ß√£o", key="btn_simular_neg"):
            if credor and valor_divida > 0:
                with st.spinner("Gerando simula√ß√£o de negocia√ß√£o..."):
                    simulacao = simular_negociacao_divida(credor, valor_divida, dias_atraso)
                st.markdown(f"<div class='info-box'>{simulacao}</div>", unsafe_allow_html=True)
            else: st.error("Preencha o nome do credor e o valor da d√≠vida.")
    with tab3:
        st.markdown("### Gloss√°rio Financeiro")
        st.markdown("Entenda termos do mundo das finan√ßas de forma clara.")
        termos_comuns = ["Juros Compostos", "CDI", "Selic", "CDB", "Tesouro Direto", "Infla√ß√£o", "Reserva de Emerg√™ncia", "Diversifica√ß√£o", "Renda Fixa", "Renda Vari√°vel", "A√ß√µes", "FGC", "IOF", "IR", "Previd√™ncia Privada", "Portabilidade de D√≠vida", "Score de Cr√©dito", "CET (Custo Efetivo Total)"]
        termo_selecionado = st.selectbox("Selecione um termo comum:", options=[""] + sorted(termos_comuns), index=0, key="select_termo_glossario")
        termo_digitado = st.text_input("Ou digite um termo para buscar:", placeholder="Ex: Amortiza√ß√£o", key="input_termo_glossario")
        termo_final = termo_digitado if termo_digitado else termo_selecionado
        if st.button("üîç Explicar Termo", key="btn_explicar_termo"):
            if termo_final:
                with st.spinner(f"Buscando explica√ß√£o para '{termo_final}'..."):
                    explicacao = obter_explicacao_termo_financeiro(termo_final)
                st.markdown(f"<div class='info-box'><h4>{termo_final}</h4>{explicacao}</div>", unsafe_allow_html=True)
                adicionar_pontos(5, f"Aprendeu sobre {termo_final}")
            else: st.error("Selecione ou digite um termo.")

def pagina_diagnostico():
    st.markdown("## üìù Diagn√≥stico Financeiro")
    st.markdown("<div class='info-box'><p>Preencha suas informa√ß√µes para um diagn√≥stico completo e recomenda√ß√µes personalizadas. Quanto mais detalhes, melhor a an√°lise!</p></div>", unsafe_allow_html=True)
    
    tab_renda, tab_despesas, tab_dividas, tab_metas = st.tabs(["üí∞ Renda", "üí∏ Despesas", "üìâ D√≠vidas", "üéØ Metas"])

    # Aba de Renda
    with tab_renda:
        st.markdown("### Suas Fontes de Renda")
        renda_mensal = st.number_input("Renda Mensal Principal (L√≠quida) (R$)", min_value=0.0, 
                                       value=st.session_state.dados_financeiros.get("renda_mensal", 0.0), step=100.0, key="num_renda_principal")
        reserva_emergencia = st.number_input("Valor Atual da Reserva de Emerg√™ncia (R$)", min_value=0.0, 
                                             value=st.session_state.dados_financeiros.get("reserva_emergencia", 0.0), step=100.0, key="num_reserva_emerg")
        if st.button("Salvar Renda e Reserva", key="btn_salvar_renda_diag"):
            st.session_state.dados_financeiros["renda_mensal"] = renda_mensal
            st.session_state.dados_financeiros["reserva_emergencia"] = reserva_emergencia
            st.success("‚úÖ Renda e reserva salvas!")
            if not st.session_state.diagnostico_realizado and renda_mensal > 0:
                adicionar_pontos(10, "Informou sua renda no diagn√≥stico")

    # Aba de Despesas
    with tab_despesas:
        st.markdown("### Suas Despesas Mensais")
        tipo_despesa = st.radio("Tipo de Despesa:", ["Fixa Essencial", "Fixa N√£o Essencial", "Vari√°vel Essencial", "Vari√°vel N√£o Essencial"], horizontal=True, key="radio_tipo_despesa")
        col_desc_desp, col_val_desp = st.columns(2)
        with col_desc_desp: categoria_despesa = st.text_input("Descri√ß√£o da Despesa", placeholder="Ex: Aluguel, Supermercado, Lazer", key="input_cat_despesa")
        with col_val_desp: valor_despesa = st.number_input("Valor Mensal (R$)", min_value=0.0, step=10.0, key="num_valor_despesa")
        
        if st.button("Adicionar Despesa", key="btn_add_despesa_diag"):
            if categoria_despesa and valor_despesa > 0:
                dict_alvo = "despesas_fixas" if "Fixa" in tipo_despesa else "despesas_variaveis"
                # Poderia adicionar subcategorias para essencial/n√£o essencial se quisesse mais granularidade
                st.session_state.dados_financeiros[dict_alvo][f"{categoria_despesa} ({tipo_despesa.split(' ')[0]})"] = valor_despesa
                st.success(f"Despesa '{categoria_despesa}' adicionada!")
                # st.rerun() # Para limpar campos, mas pode ser chato para o usu√°rio
            else: st.error("Preencha a descri√ß√£o e o valor da despesa.")

        col_fixas, col_variaveis = st.columns(2)
        with col_fixas:
            st.markdown("#### Despesas Fixas Cadastradas")
            if st.session_state.dados_financeiros["despesas_fixas"]:
                for cat, val in st.session_state.dados_financeiros["despesas_fixas"].items(): st.write(f"- {cat}: R$ {val:.2f}")
                st.markdown(f"**Total Fixas: R$ {sum(st.session_state.dados_financeiros['despesas_fixas'].values()):.2f}**")
            else: st.caption("Nenhuma despesa fixa.")
        with col_variaveis:
            st.markdown("#### Despesas Vari√°veis Cadastradas")
            if st.session_state.dados_financeiros["despesas_variaveis"]:
                for cat, val in st.session_state.dados_financeiros["despesas_variaveis"].items(): st.write(f"- {cat}: R$ {val:.2f}")
                st.markdown(f"**Total Vari√°veis: R$ {sum(st.session_state.dados_financeiros['despesas_variaveis'].values()):.2f}**")
            else: st.caption("Nenhuma despesa vari√°vel.")
        if st.button("üóëÔ∏è Limpar Todas as Despesas", key="btn_limpar_td_despesas", type="secondary"):
            st.session_state.dados_financeiros["despesas_fixas"] = {}
            st.session_state.dados_financeiros["despesas_variaveis"] = {}
            st.success("Todas as despesas foram removidas.")
            # st.rerun()

    # Aba de D√≠vidas
    with tab_dividas:
        st.markdown("### Suas D√≠vidas Ativas")
        with st.form(key="form_add_divida"):
            nome_divida = st.text_input("Nome/Descri√ß√£o da D√≠vida", placeholder="Ex: Cart√£o Banco XPTO, Financiamento Ve√≠culo")
            col_val_tot, col_parc = st.columns(2)
            with col_val_tot: valor_total_div = st.number_input("Valor Total da D√≠vida (R$)", min_value=0.0, step=100.0)
            with col_parc: parcela_mensal_div = st.number_input("Valor da Parcela Mensal (R$)", min_value=0.0, step=10.0)
            col_juros, col_prazo = st.columns(2)
            with col_juros: taxa_juros_div = st.number_input("Taxa de Juros Mensal (%)", min_value=0.0, max_value=25.0, step=0.1, format="%.2f")
            with col_prazo: total_parcelas_div = st.number_input("Total de Parcelas Restantes", min_value=0, step=1)
            submit_divida = st.form_submit_button("Adicionar D√≠vida")

            if submit_divida:
                if nome_divida and valor_total_div > 0:
                    st.session_state.dados_financeiros["dividas"][nome_divida] = {
                        "valor_total": valor_total_div, "parcela_mensal": parcela_mensal_div,
                        "taxa_juros_mensal": taxa_juros_div, 
                        "total_parcelas": total_parcelas_div if total_parcelas_div > 0 else None
                    }
                    st.success(f"D√≠vida '{nome_divida}' adicionada!")
                    # st.rerun() # Para limpar form, mas pode ser chato
                else: st.error("Preencha nome e valor total da d√≠vida.")
        
        if st.session_state.dados_financeiros["dividas"]:
            st.markdown("#### D√≠vidas Cadastradas")
            for nome, info in st.session_state.dados_financeiros["dividas"].items():
                exp = st.expander(f"{nome} - Saldo: R$ {info.get('valor_total',0):.2f} / Parcela: R$ {info.get('parcela_mensal',0):.2f}")
                exp.write(f"Juros: {info.get('taxa_juros_mensal',0):.2f}% a.m. | Parcelas Restantes: {info.get('total_parcelas','N/A')}")
                if exp.button(f"Remover {nome}", key=f"rem_div_{nome.replace(' ','_')}", type="secondary"):
                    del st.session_state.dados_financeiros["dividas"][nome]
                    st.success(f"D√≠vida '{nome}' removida.")
                    st.rerun()
        else: st.caption("Nenhuma d√≠vida cadastrada.")

    # Aba de Metas
    with tab_metas:
        st.markdown("### Suas Metas Financeiras")
        with st.form(key="form_add_meta"):
            nome_meta = st.text_input("Descri√ß√£o da Meta", placeholder="Ex: Viagem para a praia, Comprar um notebook")
            col_val_meta, col_prazo_meta = st.columns(2)
            with col_val_meta: valor_meta = st.number_input("Valor Necess√°rio (R$)", min_value=0.0, step=100.0)
            with col_prazo_meta: prazo_meta_meses = st.number_input("Prazo (meses)", min_value=1, step=1)
            prioridade_meta = st.selectbox("Prioridade", ["Alta", "M√©dia", "Baixa"], key="select_prio_meta")
            submit_meta = st.form_submit_button("Adicionar Meta")

            if submit_meta:
                if nome_meta and valor_meta > 0 and prazo_meta_meses > 0:
                    st.session_state.dados_financeiros["metas"][nome_meta] = {
                        "valor": valor_meta, "prazo_meses": prazo_meta_meses, "prioridade": prioridade_meta,
                        "valor_mensal_necessario": valor_meta / prazo_meta_meses, "data_criacao": datetime.now().strftime("%d/%m/%Y")
                    }
                    st.success(f"Meta '{nome_meta}' adicionada!")
                    if len(st.session_state.dados_financeiros["metas"]) == 1 and "Primeira Meta Definida! üéØ" not in st.session_state.conquistas:
                        adicionar_pontos(15, "Definiu sua primeira meta financeira")
                        adicionar_conquista("Primeira Meta Definida! üéØ")
                    # st.rerun()
                else: st.error("Preencha todos os campos da meta.")

        if st.session_state.dados_financeiros["metas"]:
            st.markdown("#### Metas Cadastradas")
            for nome, info in st.session_state.dados_financeiros["metas"].items():
                exp = st.expander(f"{info['prioridade']} - {nome} (R$ {info['valor']:.2f} em {info['prazo_meses']} meses)")
                exp.write(f"Necess√°rio poupar/investir: R$ {info['valor_mensal_necessario']:.2f}/m√™s")
                exp.caption(f"Criada em: {info['data_criacao']}")
                if exp.button(f"Remover Meta {nome}", key=f"rem_meta_{nome.replace(' ','_')}", type="secondary"):
                    del st.session_state.dados_financeiros["metas"][nome]
                    st.success(f"Meta '{nome}' removida.")
                    st.rerun()
        else: st.caption("Nenhuma meta cadastrada.")

    st.markdown("---")
    if st.button("üèÅ Finalizar e Ver Diagn√≥stico no Dashboard", key="btn_finalizar_diag_total", type="primary", use_container_width=True):
        if not st.session_state.dados_financeiros.get("renda_mensal"):
            st.error("Por favor, informe sua renda mensal na aba 'Renda' para finalizar.")
        else:
            st.session_state.diagnostico_realizado = True
            if "Diagn√≥stico Completo! üìä" not in st.session_state.conquistas:
                adicionar_pontos(30, "Completou o diagn√≥stico financeiro")
                adicionar_conquista("Diagn√≥stico Completo! üìä")
            st.success("‚úÖ Diagn√≥stico financeiro conclu√≠do! Redirecionando para o Dashboard...")
            st.balloons()
            time.sleep(1)
            st.session_state.pagina_atual = "dashboard"
            st.rerun()

# --- P√ÅGINA DE DESAFIOS (COM CORRE√á√ÉO) ---
def pagina_desafios():
    st.markdown("## üéØ Desafios Financeiros")
    st.markdown("""
    <div class="info-box">
        <p>Desafios ajudam a desenvolver h√°bitos financeiros saud√°veis de forma divertida. 
        Complete-os para ganhar pontos e melhorar sua sa√∫de financeira!</p>
    </div>
    """, unsafe_allow_html=True)

    # Bot√£o para gerar novo desafio
    # Usar colunas para centralizar o bot√£o
    col_btn_gerar1, col_btn_gerar2, col_btn_gerar3 = st.columns([1,2,1])
    with col_btn_gerar2:
        if st.button("üé≤ Gerar Novo Desafio", key="btn_gerar_novo_desafio", use_container_width=True):
            st.session_state.desafio_proposto = gerar_desafio_aleatorio()
            # st.rerun() # Opcional: pode ser √∫til para limpar outros estados, mas pode causar um piscar.

    # Se um desafio foi proposto e ainda n√£o aceito
    if st.session_state.desafio_proposto:
        desafio = st.session_state.desafio_proposto
        st.markdown("--- \n### ‚ú® Novo Desafio Proposto ‚ú®")
        # Usar st.container para agrupar o card do desafio proposto
        with st.container():
            st.markdown(f"""
            <div class="challenge-card" style="background-color: #fafafa; border-left: 5px solid #c97ffa;">
                <h4 style="color: #5c1691;">{desafio['titulo']}</h4>
                <p>{desafio['descricao']}</p>
                <p><strong>Dificuldade:</strong> {desafio['dificuldade']} | <strong>Pontos:</strong> {desafio['pontos']}</p>
                <p><strong>Dura√ß√£o:</strong> {desafio['duracao_dias']} dias</p>
            </div>
            """, unsafe_allow_html=True)

            # Bot√µes para aceitar ou recusar o desafio proposto
            # Usar colunas para os bot√µes de aceitar/recusar
            col_aceitar, col_recusar = st.columns(2)
            with col_aceitar:
                # Chave √∫nica para o bot√£o de aceitar, baseada no t√≠tulo para evitar conflitos
                if st.button("‚úÖ Aceitar Este Desafio!", key=f"aceitar_desafio_{desafio['titulo'].replace(' ', '_')}", use_container_width=True):
                    aceitar_desafio(st.session_state.desafio_proposto)
                    st.session_state.desafio_proposto = None  # Limpa o desafio proposto ap√≥s aceitar
                    st.rerun() # Atualiza a UI para mover o desafio para a lista de ativos
            with col_recusar:
                if st.button("‚ùå Recusar/Gerar Outro", key=f"recusar_desafio_{desafio['titulo'].replace(' ', '_')}", type="secondary", use_container_width=True):
                    st.session_state.desafio_proposto = None # Limpa o desafio proposto
                    st.info("Desafio recusado. Voc√™ pode gerar um novo.")
                    st.rerun() # Para limpar o desafio recusado da tela

    st.markdown("---")
    # Exibir desafios ativos
    if st.session_state.desafios_ativos:
        st.markdown("### üëä Seus Desafios Ativos")
        for i, desafio_ativo in enumerate(st.session_state.desafios_ativos):
            dias_restantes = (desafio_ativo["data_fim"] - datetime.now()).days
            
            with st.expander(f"{desafio_ativo['titulo']} (Restam: {max(0, dias_restantes)} dias | Pontos: {desafio_ativo['pontos']})"):
                st.markdown(f"**Descri√ß√£o:** {desafio_ativo['descricao']}")
                st.markdown(f"**Dificuldade:** {desafio_ativo['dificuldade']}")
                st.markdown(f"**In√≠cio:** {desafio_ativo['data_inicio'].strftime('%d/%m/%Y')} | **T√©rmino:** {desafio_ativo['data_fim'].strftime('%d/%m/%Y')}")
                
                # Bot√µes para concluir ou abandonar desafio ativo
                # Usar chaves √∫nicas e distintas das do desafio proposto
                col_btn_concluir, col_btn_abandonar = st.columns(2)
                with col_btn_concluir:
                    if st.button(f"‚úîÔ∏è Marcar como Conclu√≠do", key=f"btn_concluir_ativo_{i}_{desafio_ativo['titulo'].replace(' ', '_')}", use_container_width=True):
                        concluir_desafio(i)
                        st.rerun()
                with col_btn_abandonar:
                    if st.button(f"üè≥Ô∏è Abandonar Desafio", key=f"btn_abandonar_ativo_{i}_{desafio_ativo['titulo'].replace(' ', '_')}", type="secondary", use_container_width=True):
                        titulo_abandonado = st.session_state.desafios_ativos[i]['titulo']
                        st.session_state.desafios_ativos.pop(i)
                        st.warning(f"Desafio '{titulo_abandonado}' abandonado.")
                        # Se o desafio abandonado era o mesmo que estava proposto (caso raro), limpar o proposto.
                        if st.session_state.desafio_proposto and st.session_state.desafio_proposto['titulo'] == titulo_abandonado:
                            st.session_state.desafio_proposto = None
                        st.rerun()
    else:
        st.info("Voc√™ n√£o possui desafios ativos no momento. Que tal gerar um novo?")
    
    st.markdown("---")
    # Exibir desafios conclu√≠dos
    if st.session_state.desafios_concluidos:
        st.markdown("### üéâ Desafios Conclu√≠dos")
        for desafio_concluido in reversed(st.session_state.desafios_concluidos): # Mostrar mais recentes primeiro
            st.markdown(f"""
            <div class="success-box" style='border-left: 5px solid #4caf50;'>
                <h4>{desafio_concluido['titulo']} ‚úÖ</h4>
                <p>{desafio_concluido['descricao']}</p>
                <p><strong>Pontos ganhos:</strong> {desafio_concluido['pontos']}</p>
            </div>
            """, unsafe_allow_html=True)

def pagina_educacional():
    st.markdown("## üìö Conte√∫do Educacional")
    st.markdown("<div class='info-box'><p>Aprenda conceitos financeiros importantes de forma simples e pr√°tica para tomar decis√µes mais inteligentes.</p></div>", unsafe_allow_html=True)
    modulos = [
        {"titulo": "Or√ßamento Inteligente", "desc": "Domine a arte de criar e seguir um or√ßamento que funciona para voc√™.", 
         "topicos": ["Registro de Gastos", "Categoriza√ß√£o de Despesas", "Regra 50/30/20", "Ferramentas de Or√ßamento"]},
        {"titulo": "Saindo das D√≠vidas", "desc": "Estrat√©gias eficazes para se livrar das d√≠vidas e recuperar sua sa√∫de financeira.", 
         "topicos": ["Tipos de D√≠vidas", "M√©todo Avalanche vs. Bola de Neve", "Negocia√ß√£o com Credores", "Evitando Novas D√≠vidas"]},
        {"titulo": "Investimentos para Iniciantes", "desc": "Descubra como fazer seu dinheiro trabalhar para voc√™, mesmo come√ßando pequeno.", 
         "topicos": ["Perfil de Investidor", "Renda Fixa (Tesouro Direto, CDB)", "Renda Vari√°vel (A√ß√µes, FIIs - introdu√ß√£o)", "Diversifica√ß√£o", "Longo Prazo"]},
        {"titulo": "Construindo sua Reserva de Emerg√™ncia", "desc": "A import√¢ncia de ter um colch√£o financeiro e como mont√°-lo.",
         "topicos": ["O que √© e por que ter", "Quanto guardar", "Onde investir a reserva", "Quando usar"]}
    ]
    for i, modulo in enumerate(modulos):
        st.markdown(f"<div class='challenge-card'><h3>{modulo['titulo']}</h3><p>{modulo['desc']}</p></div>", unsafe_allow_html=True)
        with st.expander("Ver T√≥picos e Acessar (Simulado)"):
            for topico in modulo["topicos"]: st.markdown(f"- {topico}")
            if st.button(f"Acessar M√≥dulo: {modulo['titulo']}", key=f"btn_mod_{i}_{modulo['titulo'].replace(' ','_')}"):
                st.info(f"Simula√ß√£o: Acessando conte√∫do sobre '{modulo['titulo']}'. Em uma vers√£o completa, aqui ter√≠amos o material detalhado.")
                adicionar_pontos(5, f"Explorou o m√≥dulo {modulo['titulo']}")
                if st.button(f"Marcar '{modulo['titulo']}' como Lido", key=f"btn_mod_lido_{i}"):
                    adicionar_pontos(10, f"Concluiu leitura do m√≥dulo {modulo['titulo']}")
                    adicionar_conquista(f"Leitura Conclu√≠da: {modulo['titulo']}! üìö")
                    st.success(f"M√≥dulo '{modulo['titulo']}' marcado como lido!")
    st.markdown("--- \n ### Dicas R√°pidas do Mentor")
    dicas_rapidas = [
        ("Revise Faturas", "Sempre confira suas faturas de cart√£o e contas para identificar cobran√ßas indevidas ou gastos inesperados."),
        ("Planeje Compras Grandes", "Antes de compras caras, pesquise, compare pre√ßos e veja se cabe no or√ßamento. Evite o impulso!"),
        ("Converse sobre Dinheiro", "Falar sobre finan√ßas com parceiro(a) ou fam√≠lia ajuda a alinhar objetivos e evitar conflitos.")
    ]
    cols_dicas = st.columns(len(dicas_rapidas))
    for idx, (titulo_dica, desc_dica) in enumerate(dicas_rapidas):
        with cols_dicas[idx]:
            st.markdown(f"<div class='info-box' style='background-color: #e3f2fd; border-left-color: #2196f3;'><h4>{titulo_dica}</h4><p>{desc_dica}</p></div>", unsafe_allow_html=True)

def pagina_conquistas():
    st.markdown("## üèÜ Suas Conquistas e Progresso")
    col_nivel, col_medalha = st.columns([2,1])
    with col_nivel:
        st.markdown(f"### N√≠vel Atual: {st.session_state.nivel}")
        progresso_nivel_val = (st.session_state.pontos % 100)
        st.progress(progresso_nivel_val / 100, text=f"{progresso_nivel_val}/100 pontos para o N√≠vel {st.session_state.nivel + 1}")
        st.markdown(f"**Pontos Totais:** {st.session_state.pontos}")
    with col_medalha:
        medalha_simbolo, medalha_nome = "", ""
        if st.session_state.nivel >= 5: medalha_simbolo, medalha_nome = "üèÜ", "Especialista Financeiro"
        elif st.session_state.nivel >= 3: medalha_simbolo, medalha_nome = "ü•à", "Estrategista Financeiro"
        else: medalha_simbolo, medalha_nome = "ü•â", "Aprendiz Financeiro"
        st.markdown(f"<div style='text-align: center;'><h1 style='font-size: 3rem; margin-bottom:0;'>{medalha_simbolo}</h1><p style='font-weight: bold; color: #5c1691;'>{medalha_nome}</p></div>", unsafe_allow_html=True)

    st.markdown("--- \n### Suas Medalhas de Honra (Conquistas)")
    if st.session_state.conquistas:
        cols_conq = st.columns(3) # 3 colunas para conquistas
        for i, conquista_item in enumerate(st.session_state.conquistas):
            with cols_conq[i % 3]:
                st.markdown(f"<div class='success-box' style='text-align:center; padding: 15px;'><p style='font-weight:bold; margin-bottom:5px;'>{conquista_item.split('!')[0]}!</p><p style='font-size: 2rem;'>{conquista_item.split(' ')[-1]}</p></div>", unsafe_allow_html=True)
    else: st.info("Continue usando o app para desbloquear novas conquistas!")
    
    st.markdown("--- \n### Estat√≠sticas Gerais")
    col_stats1, col_stats2, col_stats3 = st.columns(3)
    with col_stats1: st.metric("Consultas ao Mentor AI", len(st.session_state.historico_consultas))
    with col_stats2: st.metric("Desafios Conclu√≠dos", len(st.session_state.desafios_concluidos))
    with col_stats3: st.metric("Metas Definidas", len(st.session_state.dados_financeiros.get("metas", {})))
    
    st.markdown("--- \n### Pr√≥ximas Conquistas Sugeridas")
    sugestoes_conq = [
        "Complete 3 desafios de dificuldade 'M√©dia' ou 'Dif√≠cil' üéØ",
        "Atinja o N√≠vel 5 de experi√™ncia üåü",
        "Mantenha o comprometimento de renda abaixo de 60% por um m√™s üí∞",
        "Construa uma reserva de emerg√™ncia para 1 m√™s de despesas üõ°Ô∏è",
        "Aprenda 5 novos termos no gloss√°rio financeiro üìö"
    ]
    for sug_conq in sugestoes_conq:
        ja_tem = any(sug_conq_base in c_atual for c_atual in st.session_state.conquistas for sug_conq_base in [sug_conq.split(' ')[-2]]) # Heur√≠stica simples
        if not ja_tem: st.markdown(f"- {sug_conq}")

# --- Fun√ß√£o Principal ---
def main():
    inicializar_sessao()
    exibir_cabecalho() # Exibe antes da sidebar para consist√™ncia
    exibir_barra_lateral() # A navega√ß√£o aqui pode chamar st.rerun()
    
    # Roteamento de p√°ginas
    if st.session_state.pagina_atual == "boas_vindas": pagina_boas_vindas()
    elif st.session_state.pagina_atual == "dashboard": pagina_dashboard()
    elif st.session_state.pagina_atual == "consultor": pagina_consultor()
    elif st.session_state.pagina_atual == "diagnostico": pagina_diagnostico()
    elif st.session_state.pagina_atual == "desafios": pagina_desafios()
    elif st.session_state.pagina_atual == "educacional": pagina_educacional()
    elif st.session_state.pagina_atual == "conquistas": pagina_conquistas()
    else: st.session_state.pagina_atual = "boas_vindas"; st.rerun() # Fallback

if __name__ == "__main__":
    main()
